
form hash-map, name <std::collections::hash_map::HashMap>
  task new, name <new>
    note <Creates an empty HashMap.>

    free seed
      like hash-map
        like k
          cite free
        like v
          cite free
        like random-state
          cite free
        cite free

  task with-capacity, name <with_capacity>
    note <Creates an empty HashMap with the specified capacity.>

    take capacity
      like usize
        cite free
      cite free

    free seed
      like hash-map
        like k
          cite free
        like v
          cite free
        like random-state
          cite free
        cite free

  task with-hasher, name <with_hasher>
    note <Creates an empty HashMap which will use the given hash builder to hash keys.>

    take hash-builder
      like s
        cite free
      cite free

    free seed
      like hash-map
        like k
          cite free
        like v
          cite free
        like s
          cite free
        cite free

  task with-capacity-and-hasher, name <with_capacity_and_hasher>
    note <Creates an empty HashMap with the specified capacity, using hash_builder to hash the keys.>

    take capacity
      like usize
        cite free
      cite free
    take hash-builder
      like s
        cite free
      cite free

    free seed
      like hash-map
        like k
          cite free
        like v
          cite free
        like s
          cite free
        cite free

  task capacity, name <capacity>
    note <Returns the number of elements the map can hold without reallocating.>

    take self
      cite free

    free seed
      like usize
        cite free

  task keys, name <keys>
    note <An iterator visiting all keys in arbitrary order. The iterator element type is &'a K.>

    take self
      cite free

    free seed
      like keys
        time mask
        like k
          cite free
        like v
          cite free
        cite free

  task into-keys, name <into_keys>
    note <Creates a consuming iterator visiting all the keys in arbitrary order. The map cannot be used after calling this. The iterator element type is K.>

    take self
      cite free

    free seed
      like into-keys
        like k
          cite free
        like v
          cite free
        cite free

  task values, name <values>
    note <An iterator visiting all values in arbitrary order. The iterator element type is &'a V.>

    take self
      cite free

    free seed
      like values
        time mask
        like k
          cite free
        like v
          cite free
        cite free

  task values-mut, name <values_mut>
    note <An iterator visiting all values mutably in arbitrary order. The iterator element type is &'a mut V.>

    take self
      cite free

    free seed
      like values-mut
        time mask
        like k
          cite free
        like v
          cite free
        cite free

  task into-values, name <into_values>
    note <Creates a consuming iterator visiting all the values in arbitrary order. The map cannot be used after calling this. The iterator element type is V.>

    take self
      cite free

    free seed
      like into-values
        like k
          cite free
        like v
          cite free
        cite free

  task iter, name <iter>
    note <An iterator visiting all key-value pairs in arbitrary order. The iterator element type is (&'a K, &'a V).>

    take self
      cite free

    free seed
      like iter
        time mask
        like k
          cite free
        like v
          cite free
        cite free

  task iter-mut, name <iter_mut>
    note <An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is (&'a K, &'a mut V).>

    take self
      cite free

    free seed
      like iter-mut
        time mask
        like k
          cite free
        like v
          cite free
        cite free

  task len, name <len>
    note <Returns the number of elements in the map.>

    take self
      cite free

    free seed
      like usize
        cite free

  task is-empty, name <is_empty>
    note <Returns true if the map contains no elements.>

    take self
      cite free

    free seed
      like bool
        cite free

  task drain, name <drain>
    note <Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.>

    take self
      cite free

    free seed
      like drain
        time mask
        like k
          cite free
        like v
          cite free
        cite free

  task drain-filter, name <drain_filter>
    note <Creates an iterator which uses a closure to determine if an element should be removed.>

    lead f
      like fn-mut
        take f-1, like k
        take f-2, like v
        free seed
          like bool
            cite free

    head f

    take self
      cite free
    take pred
      like f
        cite free
      cite free

    free seed
      like drain-filter
        time mask
        like k
          cite free
        like v
          cite free
        like f
          cite free
        cite free

  task retain, name <retain>
    note <Retains only the elements specified by the predicate.>

    lead f
      like fn-mut
        take f-1, like k
        take f-2, like v
        free seed
          like bool
            cite free

    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

  task clear, name <clear>
    note <Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.>

    take self
      cite free

  task hasher, name <hasher>
    note <Returns a reference to the map's BuildHasher.>

    take self
      cite free

    free seed
      like s

  task reserve, name <reserve>
    note <Reserves capacity for at least additional more elements to be inserted in the HashMap. The collection may reserve more space to avoid frequent reallocations.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

  task try-reserve, name <try_reserve>
    note <Tries to reserve capacity for at least additional more elements to be inserted in the given HashMap&lt;K, V&gt;. The collection may reserve more space to avoid frequent reallocations.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

    free seed
      like result
        like form
        like try-reserve-error
          cite free
        cite free

  task shrink-to-fit, name <shrink_to_fit>
    note <Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.>

    take self
      cite free

  task shrink-to, name <shrink_to>
    note <Shrinks the capacity of the map with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.>

    take self
      cite free
    take min-capacity
      like usize
        cite free
      cite free

  task entry, name <entry>
    note <Gets the given key's corresponding entry in the map for in-place manipulation.>

    take self
      cite free
    take key
      like k
        cite free
      cite free

    free seed
      like entry
        time mask
        like k
          cite free
        like v
          cite free
        cite free

  task get, name <get>
    note <Returns a reference to the value corresponding to the key.>

    lead k
      like borrow
        like q
          cite free
        cite free
    lead q
      like hash
        cite free

    head q

    take self
      cite free
    take k
      like q

    free seed
      like option
        like v
        cite free

  task get-key-value, name <get_key_value>
    note <Returns the key-value pair corresponding to the supplied key.>

    lead k
      like borrow
        like q
          cite free
        cite free
    lead q
      like hash
        cite free

    head q

    take self
      cite free
    take k
      like q

    free seed
      like option
        like form
          take t-1, like k
          take t-2, like v
        cite free

  task contains-key, name <contains_key>
    note <Returns true if the map contains a value for the specified key.>

    lead k
      like borrow
        like q
          cite free
        cite free
    lead q
      like hash
        cite free

    head q

    take self
      cite free
    take k
      like q

    free seed
      like bool
        cite free

  task get-mut, name <get_mut>
    note <Returns a mutable reference to the value corresponding to the key.>

    lead k
      like borrow
        like q
          cite free
        cite free
    lead q
      like hash
        cite free

    head q

    take self
      cite free
    take k
      like q

    free seed
      like option
        like v
        cite free

  task insert, name <insert>
    note <Inserts a key-value pair into the map.>

    take self
      cite free
    take k
      like k
        cite free
      cite free
    take v
      like v
        cite free
      cite free

    free seed
      like option
        like v
          cite free
        cite free

  task try-insert, name <try_insert>
    note <Tries to insert a key-value pair into the map, and returns a mutable reference to the value in the entry.>

    take self
      cite free
    take key
      like k
        cite free
      cite free
    take value
      like v
        cite free
      cite free

    free seed
      like result
        like v
        like occupied-error
          time mask
          like k
            cite free
          like v
            cite free
          cite free
        cite free

  task remove, name <remove>
    note <Removes a key from the map, returning the value at the key if the key was previously in the map.>

    lead k
      like borrow
        like q
          cite free
        cite free
    lead q
      like hash
        cite free

    head q

    take self
      cite free
    take k
      like q

    free seed
      like option
        like v
          cite free
        cite free

  task remove-entry, name <remove_entry>
    note <Removes a key from the map, returning the stored key and value if the key was previously in the map.>

    lead k
      like borrow
        like q
          cite free
        cite free
    lead q
      like hash
        cite free

    head q

    take self
      cite free
    take k
      like q

    free seed
      like option
        like form
          take t-1, like k
          take t-2, like v
        cite free

  task raw-entry-mut, name <raw_entry_mut>
    note <Creates a raw entry builder for the HashMap.>

    take self
      cite free

    free seed
      like raw-entry-builder-mut
        time mask
        like k
          cite free
        like v
          cite free
        like s
          cite free
        cite free

  task raw-entry, name <raw_entry>
    note <Creates a raw immutable entry builder for the HashMap.>

    take self
      cite free

    free seed
      like raw-entry-builder
        time mask
        like k
          cite free
        like v
          cite free
        like s
          cite free
        cite free

  task clone, name <clone>
    note <Returns a copy of the value.>

    take self
      cite free

    free seed
      like self
        cite free

  task clone-from, name <clone_from>
    note <Performs copy-assignment from source.>

    take self
      cite free
    take other
      like self

  task fmt, name <fmt>
    note <Formats the value using the given formatter.>

    take self
      cite free
    take f
      like formatter
        time mask
      lock free

    free seed
      like result
        cite free

  task default, name <default>
    note <Creates an empty HashMap&lt;K, V, S&gt;, with the Default value for the hasher.>

    free seed
      like hash-map
        like k
          cite free
        like v
          cite free
        like s
          cite free
        cite free

  task extend, name <extend>
    note <Extends a collection with the contents of an iterator.>

    head t

    take self
      cite free
    take iter
      like t
        cite free
      cite free

  task extend-one, name <extend_one>
    note <Extends a collection with exactly one element.>

    take self
      cite free
      cite free

  task extend-reserve, name <extend_reserve>
    note <Reserves capacity in a collection for the given number of additional elements.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

  task extend, name <extend>
    note <Extends a collection with the contents of an iterator.>

    head t

    take self
      cite free
    take iter
      like t
        cite free
      cite free

  task extend-one, name <extend_one>
    note <Extends a collection with exactly one element.>

    take self
      cite free
      cite free

  task extend-reserve, name <extend_reserve>
    note <Reserves capacity in a collection for the given number of additional elements.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

  task from, name <from>
    take arr
      like list
        like form
          like form
            take t-1, like k
            take t-2, like v
        name n
      cite free

    free seed
      like self
        cite free

  task from-iter, name <from_iter>
    note <Creates a value from an iterator.>

    head t

    take iter
      like t
        cite free
      cite free

    free seed
      like hash-map
        like k
          cite free
        like v
          cite free
        like s
          cite free
        cite free

  task index, name <index>
    note <Returns a reference to the value corresponding to the supplied key.>

    take self
      cite free
    take key
      like q

    free seed
      like v

  task into-iter, name <into_iter>
    note <Creates an iterator from a value.>

    take self
      cite free

    free seed
      like iter
        time a
        like k
          cite free
        like v
          cite free
        cite free

  task into-iter, name <into_iter>
    note <Creates an iterator from a value.>

    take self
      cite free

    free seed
      like iter-mut
        time a
        like k
          cite free
        like v
          cite free
        cite free

  task into-iter, name <into_iter>
    note <Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.>

    take self
      cite free

    free seed
      like into-iter
        like k
          cite free
        like v
          cite free
        cite free

  task eq, name <eq>
    note <This method tests for self and other values to be equal, and is used by ==.>

    take self
      cite free
    take other
      like hash-map
        like k
          cite free
        like v
          cite free
        like s
          cite free

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <This method tests for !=.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free
