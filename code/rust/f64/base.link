
form f64
  task floor, name <floor>
    note <Returns the largest integer less than or equal to a number.>

    take self
      cite free

    free seed
      like f64
        cite free

  task ceil, name <ceil>
    note <Returns the smallest integer greater than or equal to a number.>

    take self
      cite free

    free seed
      like f64
        cite free

  task round, name <round>
    note <Returns the nearest integer to a number. Round half-way cases away from 0.0.>

    take self
      cite free

    free seed
      like f64
        cite free

  task trunc, name <trunc>
    note <Returns the integer part of a number.>

    take self
      cite free

    free seed
      like f64
        cite free

  task fract, name <fract>
    note <Returns the fractional part of a number.>

    take self
      cite free

    free seed
      like f64
        cite free

  task abs, name <abs>
    note <Computes the absolute value of self. Returns NAN if the number is NAN.>

    take self
      cite free

    free seed
      like f64
        cite free

  task signum, name <signum>
    note <Returns a number that represents the sign of self.>

    take self
      cite free

    free seed
      like f64
        cite free

  task copysign, name <copysign>
    note <Returns a number composed of the magnitude of self and the sign of sign.>

    take self
      cite free
    take sign
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task mul-add, name <mul_add>
    note <Fused multiply-add. Computes (self * a) + b with only one rounding error, yielding a more accurate result than an unfused multiply-add.>

    take self
      cite free
    take a
      like f64
        cite free
      cite free
    take b
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task div-euclid, name <div_euclid>
    note <Calculates Euclidean division, the matching method for rem_euclid.>

    take self
      cite free
    take rhs
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task rem-euclid, name <rem_euclid>
    note <Calculates the least nonnegative remainder of self (mod rhs).>

    take self
      cite free
    take rhs
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task powi, name <powi>
    note <Raises a number to an integer power.>

    take self
      cite free
    take n
      like i32
        cite free
      cite free

    free seed
      like f64
        cite free

  task powf, name <powf>
    note <Raises a number to a floating point power.>

    take self
      cite free
    take n
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task sqrt, name <sqrt>
    note <Returns the square root of a number.>

    take self
      cite free

    free seed
      like f64
        cite free

  task exp, name <exp>
    note <Returns e^(self), (the exponential function).>

    take self
      cite free

    free seed
      like f64
        cite free

  task exp2, name <exp2>
    note <Returns 2^(self).>

    take self
      cite free

    free seed
      like f64
        cite free

  task ln, name <ln>
    note <Returns the natural logarithm of the number.>

    take self
      cite free

    free seed
      like f64
        cite free

  task log, name <log>
    note <Returns the logarithm of the number with respect to an arbitrary base.>

    take self
      cite free
    take base
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task log2, name <log2>
    note <Returns the base 2 logarithm of the number.>

    take self
      cite free

    free seed
      like f64
        cite free

  task log10, name <log10>
    note <Returns the base 10 logarithm of the number.>

    take self
      cite free

    free seed
      like f64
        cite free

  task abs-sub, name <abs_sub>
    note <The positive difference of two numbers.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task cbrt, name <cbrt>
    note <Returns the cube root of a number.>

    take self
      cite free

    free seed
      like f64
        cite free

  task hypot, name <hypot>
    note <Calculates the length of the hypotenuse of a right-angle triangle given legs of length x and y.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task sin, name <sin>
    note <Computes the sine of a number (in radians).>

    take self
      cite free

    free seed
      like f64
        cite free

  task cos, name <cos>
    note <Computes the cosine of a number (in radians).>

    take self
      cite free

    free seed
      like f64
        cite free

  task tan, name <tan>
    note <Computes the tangent of a number (in radians).>

    take self
      cite free

    free seed
      like f64
        cite free

  task asin, name <asin>
    note <Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].>

    take self
      cite free

    free seed
      like f64
        cite free

  task acos, name <acos>
    note <Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].>

    take self
      cite free

    free seed
      like f64
        cite free

  task atan, name <atan>
    note <Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];>

    take self
      cite free

    free seed
      like f64
        cite free

  task atan2, name <atan2>
    note <Computes the four quadrant arctangent of self (y) and other (x) in radians.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task sin-cos, name <sin_cos>
    note <Simultaneously computes the sine and cosine of the number, x. Returns (sin(x), cos(x)).>

    take self
      cite free

    free seed
      like form
        take t-1, like f64
        take t-2, like f64

  task exp-m1, name <exp_m1>
    note <Returns e^(self) - 1 in a way that is accurate even if the number is close to zero.>

    take self
      cite free

    free seed
      like f64
        cite free

  task ln-1p, name <ln_1p>
    note <Returns ln(1+n) (natural logarithm) more accurately than if the operations were performed separately.>

    take self
      cite free

    free seed
      like f64
        cite free

  task sinh, name <sinh>
    note <Hyperbolic sine function.>

    take self
      cite free

    free seed
      like f64
        cite free

  task cosh, name <cosh>
    note <Hyperbolic cosine function.>

    take self
      cite free

    free seed
      like f64
        cite free

  task tanh, name <tanh>
    note <Hyperbolic tangent function.>

    take self
      cite free

    free seed
      like f64
        cite free

  task asinh, name <asinh>
    note <Inverse hyperbolic sine function.>

    take self
      cite free

    free seed
      like f64
        cite free

  task acosh, name <acosh>
    note <Inverse hyperbolic cosine function.>

    take self
      cite free

    free seed
      like f64
        cite free

  task atanh, name <atanh>
    note <Inverse hyperbolic tangent function.>

    take self
      cite free

    free seed
      like f64
        cite free

  task is-nan, name <is_nan>
    note <Returns true if this value is NaN.>

    take self
      cite free

    free seed
      like bool
        cite free

  task is-infinite, name <is_infinite>
    note <Returns true if this value is positive infinity or negative infinity, and false otherwise.>

    take self
      cite free

    free seed
      like bool
        cite free

  task is-finite, name <is_finite>
    note <Returns true if this number is neither infinite nor NaN.>

    take self
      cite free

    free seed
      like bool
        cite free

  task is-subnormal, name <is_subnormal>
    note <Returns true if the number is subnormal.>

    take self
      cite free

    free seed
      like bool
        cite free

  task is-normal, name <is_normal>
    note <Returns true if the number is neither zero, infinite, subnormal, or NaN.>

    take self
      cite free

    free seed
      like bool
        cite free

  task classify, name <classify>
    note <Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.>

    take self
      cite free

    free seed
      like fp-category
        cite free

  task is-sign-positive, name <is_sign_positive>
    note <Returns true if self has a positive sign, including +0.0, NaNs with positive sign bit and positive infinity.>

    take self
      cite free

    free seed
      like bool
        cite free

  task is-sign-negative, name <is_sign_negative>
    note <Returns true if self has a negative sign, including -0.0, NaNs with negative sign bit and negative infinity.>

    take self
      cite free

    free seed
      like bool
        cite free

  task recip, name <recip>
    note <Takes the reciprocal (inverse) of a number, 1/x.>

    take self
      cite free

    free seed
      like f64
        cite free

  task to-degrees, name <to_degrees>
    note <Converts radians to degrees.>

    take self
      cite free

    free seed
      like f64
        cite free

  task to-radians, name <to_radians>
    note <Converts degrees to radians.>

    take self
      cite free

    free seed
      like f64
        cite free

  task max, name <max>
    note <Returns the maximum of the two numbers.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task min, name <min>
    note <Returns the minimum of the two numbers.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task maximum, name <maximum>
    note <Returns the maximum of the two numbers, propagating NaNs.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task minimum, name <minimum>
    note <Returns the minimum of the two numbers, propagating NaNs.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task to-int-unchecked, name <to_int_unchecked>
    note <Rounds toward zero and converts to any primitive integer type, assuming that the value is finite and fits in that type.>

    lead f64
      like float-to-int
        like int
          cite free
        cite free

    head int

    take self
      cite free

    free seed
      like int
        cite free

  task to-bits, name <to_bits>
    note <Raw transmutation to u64.>

    take self
      cite free

    free seed
      like u64
        cite free

  task from-bits, name <from_bits>
    note <Raw transmutation from u64.>

    take v
      like u64
        cite free
      cite free

    free seed
      like f64
        cite free

  task to-be-bytes, name <to_be_bytes>
    note <Return the memory representation of this floating point number as a byte array in big-endian (network) byte order.>

    take self
      cite free

    free seed
      like list
        like u8
        name 8

  task to-le-bytes, name <to_le_bytes>
    note <Return the memory representation of this floating point number as a byte array in little-endian byte order.>

    take self
      cite free

    free seed
      like list
        like u8
        name 8

  task to-ne-bytes, name <to_ne_bytes>
    note <Return the memory representation of this floating point number as a byte array in native byte order.>

    take self
      cite free

    free seed
      like list
        like u8
        name 8

  task from-be-bytes, name <from_be_bytes>
    note <Create a floating point value from its representation as a byte array in big endian.>

    take bytes
      like list
        like u8
        name 8
      cite free

    free seed
      like f64
        cite free

  task from-le-bytes, name <from_le_bytes>
    note <Create a floating point value from its representation as a byte array in little endian.>

    take bytes
      like list
        like u8
        name 8
      cite free

    free seed
      like f64
        cite free

  task from-ne-bytes, name <from_ne_bytes>
    note <Create a floating point value from its representation as a byte array in native endian.>

    take bytes
      like list
        like u8
        name 8
      cite free

    free seed
      like f64
        cite free

  task total-cmp, name <total_cmp>
    note <Returns an ordering between self and other values. Unlike the standard partial comparison between floating point numbers, this comparison always produces an ordering in accordance to the totalOrder predicate as defined in IEEE 754 (2008 revision) floating point standard. The values are ordered in following order:>

    take self
      cite free
    take other
      like f64

    free seed
      like ordering
        cite free

  task clamp, name <clamp>
    note <Restrict a value to a certain interval unless it is NaN.>

    take self
      cite free
    take min
      like f64
        cite free
      cite free
    take max
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task add, name <add>
    note <Performs the + operation.>

    cast c-1
      like f64
      like add
        like f64
          cite free

    take self
      cite free
    take other
      like f64

    free seed
      like c-1/output

  task add, name <add>
    note <Performs the + operation.>

    cast c-1
      like f64
      like add
        like f64
          cite free

    take self
      cite free
    take other
      like f64

    free seed
      like c-1/output

  task add, name <add>
    note <Performs the + operation.>

    cast c-1
      like f64
      like add
        like f64
          cite free

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like c-1/output

  task add, name <add>
    note <Performs the + operation.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task add-assign, name <add_assign>
    note <Performs the += operation.>

    take self
      cite free
    take other
      like f64

  task add-assign, name <add_assign>
    note <Performs the += operation.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

  task clone, name <clone>
    note <Returns a copy of the value.>

    take self
      cite free

    free seed
      like f64
        cite free

  task clone-from, name <clone_from>
    note <Performs copy-assignment from source.>

    take self
      cite free
    take source
      like self

  task fmt, name <fmt>
    note <Formats the value using the given formatter.>

    take self
      cite free
    take fmt
      like formatter
        time mask
      lock free

    free seed
      like result
        like form
        like error
          cite free
        cite free

  task default, name <default>
    note <Returns the default value of 0.0>

    free seed
      like f64
        cite free

  task fmt, name <fmt>
    note <Formats the value using the given formatter.>

    take self
      cite free
    take fmt
      like formatter
        time mask
      lock free

    free seed
      like result
        like form
        like error
          cite free
        cite free

  task div, name <div>
    note <Performs the / operation.>

    cast c-1
      like f64
      like div
        like f64
          cite free

    take self
      cite free
    take other
      like f64

    free seed
      like c-1/output

  task div, name <div>
    note <Performs the / operation.>

    cast c-1
      like f64
      like div
        like f64
          cite free

    take self
      cite free
    take other
      like f64

    free seed
      like c-1/output

  task div, name <div>
    note <Performs the / operation.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task div, name <div>
    note <Performs the / operation.>

    cast c-1
      like f64
      like div
        like f64
          cite free

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like c-1/output

  task div-assign, name <div_assign>
    note <Performs the /= operation.>

    take self
      cite free
    take other
      like f64

  task div-assign, name <div_assign>
    note <Performs the /= operation.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

  task from, name <from>
    note <Converts f32 to f64 losslessly.>

    take small
      like f32
        cite free
      cite free

    free seed
      like f64
        cite free

  task from, name <from>
    note <Converts i16 to f64 losslessly.>

    take small
      like i16
        cite free
      cite free

    free seed
      like f64
        cite free

  task from, name <from>
    note <Converts i32 to f64 losslessly.>

    take small
      like i32
        cite free
      cite free

    free seed
      like f64
        cite free

  task from, name <from>
    note <Converts i8 to f64 losslessly.>

    take small
      like i8
        cite free
      cite free

    free seed
      like f64
        cite free

  task from, name <from>
    note <Converts u16 to f64 losslessly.>

    take small
      like u16
        cite free
      cite free

    free seed
      like f64
        cite free

  task from, name <from>
    note <Converts u32 to f64 losslessly.>

    take small
      like u32
        cite free
      cite free

    free seed
      like f64
        cite free

  task from, name <from>
    note <Converts u8 to f64 losslessly.>

    take small
      like u8
        cite free
      cite free

    free seed
      like f64
        cite free

  task from-str, name <from_str>
    note <Converts a string in base 10 to a float. Accepts an optional decimal exponent.>

    take src
      like str

    free seed
      like result
        like f64
          cite free
        like parse-float-error
          cite free
        cite free

  task fmt, name <fmt>
    note <Formats the value using the given formatter.>

    take self
      cite free
    take fmt
      like formatter
        time mask
      lock free

    free seed
      like result
        like form
        like error
          cite free
        cite free

  task mul, name <mul>
    note <Performs the * operation.>

    cast c-1
      like f64
      like mul
        like f64
          cite free

    take self
      cite free
    take other
      like f64

    free seed
      like c-1/output

  task mul, name <mul>
    note <Performs the * operation.>

    cast c-1
      like f64
      like mul
        like f64
          cite free

    take self
      cite free
    take other
      like f64

    free seed
      like c-1/output

  task mul, name <mul>
    note <Performs the * operation.>

    cast c-1
      like f64
      like mul
        like f64
          cite free

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like c-1/output

  task mul, name <mul>
    note <Performs the * operation.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task mul-assign, name <mul_assign>
    note <Performs the *= operation.>

    take self
      cite free
    take other
      like f64

  task mul-assign, name <mul_assign>
    note <Performs the *= operation.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

  task neg, name <neg>
    note <Performs the unary - operation.>

    take self
      cite free

    free seed
      like f64
        cite free

  task neg, name <neg>
    note <Performs the unary - operation.>

    cast c-1
      like f64
      like neg

    take self
      cite free

    free seed
      like c-1/output

  task eq, name <eq>
    note <This method tests for self and other values to be equal, and is used by ==.>

    take self
      cite free
    take other
      like f64

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <This method tests for !=.>

    take self
      cite free
    take other
      like f64

    free seed
      like bool
        cite free

  task partial-cmp, name <partial_cmp>
    note <This method returns an ordering between self and other values if one exists.>

    take self
      cite free
    take other
      like f64

    free seed
      like option
        like ordering
          cite free
        cite free

  task lt, name <lt>
    note <This method tests less than (for self and other) and is used by the &lt; operator.>

    take self
      cite free
    take other
      like f64

    free seed
      like bool
        cite free

  task le, name <le>
    note <This method tests less than or equal to (for self and other) and is used by the &lt;= operator.>

    take self
      cite free
    take other
      like f64

    free seed
      like bool
        cite free

  task ge, name <ge>
    note <This method tests greater than or equal to (for self and other) and is used by the &gt;= operator.>

    take self
      cite free
    take other
      like f64

    free seed
      like bool
        cite free

  task gt, name <gt>
    note <This method tests greater than (for self and other) and is used by the &gt; operator.>

    take self
      cite free
    take other
      like f64

    free seed
      like bool
        cite free

  task product, name <product>
    note <Method which takes an iterator and generates Self from the elements by multiplying the items.>

    lead i
      like iterator
        like item
          cite free
          fall back
            like f64
              time a
        cite free

    head i

    take iter
      like i
        cite free
      cite free

    free seed
      like f64
        cite free

  task product, name <product>
    note <Method which takes an iterator and generates Self from the elements by multiplying the items.>

    lead i
      like iterator
        like item
          cite free
          fall back
            like f64
              cite free
        cite free

    head i

    take iter
      like i
        cite free
      cite free

    free seed
      like f64
        cite free

  task rem, name <rem>
    note <Performs the % operation.>

    cast c-1
      like f64
      like rem
        like f64
          cite free

    take self
      cite free
    take other
      like f64

    free seed
      like c-1/output

  task rem, name <rem>
    note <Performs the % operation.>

    cast c-1
      like f64
      like rem
        like f64
          cite free

    take self
      cite free
    take other
      like f64

    free seed
      like c-1/output

  task rem, name <rem>
    note <Performs the % operation.>

    cast c-1
      like f64
      like rem
        like f64
          cite free

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like c-1/output

  task rem, name <rem>
    note <Performs the % operation.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task rem-assign, name <rem_assign>
    note <Performs the %= operation.>

    take self
      cite free
    take other
      like f64

  task rem-assign, name <rem_assign>
    note <Performs the %= operation.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

  task sub, name <sub>
    note <Performs the - operation.>

    cast c-1
      like f64
      like sub
        like f64
          cite free

    take self
      cite free
    take other
      like f64

    free seed
      like c-1/output

  task sub, name <sub>
    note <Performs the - operation.>

    cast c-1
      like f64
      like sub
        like f64
          cite free

    take self
      cite free
    take other
      like f64

    free seed
      like c-1/output

  task sub, name <sub>
    note <Performs the - operation.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like f64
        cite free

  task sub, name <sub>
    note <Performs the - operation.>

    cast c-1
      like f64
      like sub
        like f64
          cite free

    take self
      cite free
    take other
      like f64
        cite free
      cite free

    free seed
      like c-1/output

  task sub-assign, name <sub_assign>
    note <Performs the -= operation.>

    take self
      cite free
    take other
      like f64

  task sub-assign, name <sub_assign>
    note <Performs the -= operation.>

    take self
      cite free
    take other
      like f64
        cite free
      cite free

  task sum, name <sum>
    note <Method which takes an iterator and generates Self from the elements by “summing up” the items.>

    lead i
      like iterator
        like item
          cite free
          fall back
            like f64
              time a
        cite free

    head i

    take iter
      like i
        cite free
      cite free

    free seed
      like f64
        cite free

  task sum, name <sum>
    note <Method which takes an iterator and generates Self from the elements by “summing up” the items.>

    lead i
      like iterator
        like item
          cite free
          fall back
            like f64
              cite free
        cite free

    head i

    take iter
      like i
        cite free
      cite free

    free seed
      like f64
        cite free

  task fmt, name <fmt>
    note <Formats the value using the given formatter.>

    take self
      cite free
    take fmt
      like formatter
        time mask
      lock free

    free seed
      like result
        like form
        like error
          cite free
        cite free
