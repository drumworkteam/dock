
form box
  task new, name <new>
    note <Allocates memory on the heap and then places x into it.>

    take x
      like t
        cite free
      cite free

    free seed
      like box
        like t
          cite free
        like global
          cite free
        cite free

  task new-uninit, name <new_uninit>
    note <Constructs a new box with uninitialized contents.>

    free seed
      like box
        like maybe-uninit
          like t
            cite free
          cite free
        like global
          cite free
        cite free

  task new-zeroed, name <new_zeroed>
    note <Constructs a new Box with uninitialized contents, with the memory being filled with 0 bytes.>

    free seed
      like box
        like maybe-uninit
          like t
            cite free
          cite free
        like global
          cite free
        cite free

  task pin, name <pin>
    note <Constructs a new Pin&lt;Box&lt;T&gt;&gt;. If T does not implement Unpin, then x will be pinned in memory and unable to be moved.>

    take x
      like t
        cite free
      cite free

    free seed
      like pin
        like box
          like t
            cite free
          like global
            cite free
          cite free
        cite free

  task try-new, name <try_new>
    note <Allocates memory on the heap then places x into it, returning an error if the allocation fails>

    take x
      like t
        cite free
      cite free

    free seed
      like result
        like box
          like t
            cite free
          like global
            cite free
          cite free
        like alloc-error
          cite free
        cite free

  task try-new-uninit, name <try_new_uninit>
    note <Constructs a new box with uninitialized contents on the heap, returning an error if the allocation fails>

    free seed
      like result
        like box
          like maybe-uninit
            like t
              cite free
            cite free
          like global
            cite free
          cite free
        like alloc-error
          cite free
        cite free

  task try-new-zeroed, name <try_new_zeroed>
    note <Constructs a new Box with uninitialized contents, with the memory being filled with 0 bytes on the heap>

    free seed
      like result
        like box
          like maybe-uninit
            like t
              cite free
            cite free
          like global
            cite free
          cite free
        like alloc-error
          cite free
        cite free

  task new-in, name <new_in>
    note <Allocates memory in the given allocator then places x into it.>

    lead a
      like allocator
        cite free

    take x
      like t
        cite free
      cite free
    take alloc
      like a
        cite free
      cite free

    free seed
      like box
        like t
          cite free
        like a
          cite free
        cite free

  task try-new-in, name <try_new_in>
    note <Allocates memory in the given allocator then places x into it, returning an error if the allocation fails>

    lead a
      like allocator
        cite free

    take x
      like t
        cite free
      cite free
    take alloc
      like a
        cite free
      cite free

    free seed
      like result
        like box
          like t
            cite free
          like a
            cite free
          cite free
        like alloc-error
          cite free
        cite free

  task new-uninit-in, name <new_uninit_in>
    note <Constructs a new box with uninitialized contents in the provided allocator.>

    lead a
      like allocator
        cite free

    take alloc
      like a
        cite free
      cite free

    free seed
      like box
        like maybe-uninit
          like t
            cite free
          cite free
        like a
          cite free
        cite free

  task try-new-uninit-in, name <try_new_uninit_in>
    note <Constructs a new box with uninitialized contents in the provided allocator, returning an error if the allocation fails>

    lead a
      like allocator
        cite free

    take alloc
      like a
        cite free
      cite free

    free seed
      like result
        like box
          like maybe-uninit
            like t
              cite free
            cite free
          like a
            cite free
          cite free
        like alloc-error
          cite free
        cite free

  task new-zeroed-in, name <new_zeroed_in>
    note <Constructs a new Box with uninitialized contents, with the memory being filled with 0 bytes in the provided allocator.>

    lead a
      like allocator
        cite free

    take alloc
      like a
        cite free
      cite free

    free seed
      like box
        like maybe-uninit
          like t
            cite free
          cite free
        like a
          cite free
        cite free

  task try-new-zeroed-in, name <try_new_zeroed_in>
    note <Constructs a new Box with uninitialized contents, with the memory being filled with 0 bytes in the provided allocator, returning an error if the allocation fails,>

    lead a
      like allocator
        cite free

    take alloc
      like a
        cite free
      cite free

    free seed
      like result
        like box
          like maybe-uninit
            like t
              cite free
            cite free
          like a
            cite free
          cite free
        like alloc-error
          cite free
        cite free

  task pin-in, name <pin_in>
    note <Constructs a new Pin&lt;Box&lt;T, A&gt;&gt;. If T does not implement Unpin, then x will be pinned in memory and unable to be moved.>

    lead a
      time static
      base allocator
        cite free

    take x
      like t
        cite free
      cite free
    take alloc
      like a
        cite free
      cite free

    free seed
      like pin
        like box
          like t
            cite free
          like a
            cite free
          cite free
        cite free

  task into-boxed-slice, name <into_boxed_slice>
    note <Converts a Box&lt;T&gt; into a Box&lt;[T]&gt;>

    take boxed
      like box
        like t
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like box
        list t
        like a
          cite free
        cite free

  task into-inner, name <into_inner>
    note <Consumes the Box, returning the wrapped value.>

    take boxed
      like box
        like t
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like t
        cite free

  task new-uninit-slice, name <new_uninit_slice>
    note <Constructs a new boxed slice with uninitialized contents.>

    take len
      like usize
        cite free
      cite free

    free seed
      like box
        list maybe-uninit
        like global
          cite free
        cite free

  task new-zeroed-slice, name <new_zeroed_slice>
    note <Constructs a new boxed slice with uninitialized contents, with the memory being filled with 0 bytes.>

    take len
      like usize
        cite free
      cite free

    free seed
      like box
        list maybe-uninit
        like global
          cite free
        cite free

  task try-new-uninit-slice, name <try_new_uninit_slice>
    note <Constructs a new boxed slice with uninitialized contents. Returns an error if the allocation fails>

    take len
      like usize
        cite free
      cite free

    free seed
      like result
        like box
          list maybe-uninit
          like global
            cite free
          cite free
        like alloc-error
          cite free
        cite free

  task try-new-zeroed-slice, name <try_new_zeroed_slice>
    note <Constructs a new boxed slice with uninitialized contents, with the memory being filled with 0 bytes. Returns an error if the allocation fails>

    take len
      like usize
        cite free
      cite free

    free seed
      like result
        like box
          list maybe-uninit
          like global
            cite free
          cite free
        like alloc-error
          cite free
        cite free

  task new-uninit-slice-in, name <new_uninit_slice_in>
    note <Constructs a new boxed slice with uninitialized contents in the provided allocator.>

    take len
      like usize
        cite free
      cite free
    take alloc
      like a
        cite free
      cite free

    free seed
      like box
        list maybe-uninit
        like a
          cite free
        cite free

  task new-zeroed-slice-in, name <new_zeroed_slice_in>
    note <Constructs a new boxed slice with uninitialized contents in the provided allocator, with the memory being filled with 0 bytes.>

    take len
      like usize
        cite free
      cite free
    take alloc
      like a
        cite free
      cite free

    free seed
      like box
        list maybe-uninit
        like a
          cite free
        cite free

  task assume-init, name <assume_init>
    note <Converts to Box&lt;T, A&gt;.>

    take self
      cite free

    free seed
      like box
        like t
          cite free
        like a
          cite free
        cite free

  task write, name <write>
    note <Writes the value and converts to Box&lt;T, A&gt;.>

    take boxed
      like box
        like maybe-uninit
          like t
            cite free
          cite free
        like a
          cite free
        cite free
      cite free
    take value
      like t
        cite free
      cite free

    free seed
      like box
        like t
          cite free
        like a
          cite free
        cite free

  task assume-init, name <assume_init>
    note <Converts to Box&lt;[T], A&gt;.>

    take self
      cite free

    free seed
      like box
        list t
        like a
          cite free
        cite free

  task from-raw, name <from_raw>
    note <Constructs a box from a raw pointer.>

    take raw
      like t
        cite free
      cite free
      lock free
      dive take

    free seed
      like box
        like t
          cite free
        like global
          cite free
        cite free

  task from-raw-in, name <from_raw_in>
    note <Constructs a box from a raw pointer in the given allocator.>

    take raw
      like t
        cite free
      cite free
      lock free
      dive take
    take alloc
      like a
        cite free
      cite free

    free seed
      like box
        like t
          cite free
        like a
          cite free
        cite free

  task into-raw, name <into_raw>
    note <Consumes the Box, returning a wrapped raw pointer.>

    take b
      like box
        like t
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like t
        cite free

  task into-raw-with-allocator, name <into_raw_with_allocator>
    note <Consumes the Box, returning a wrapped raw pointer and the allocator.>

    take b
      like box
        like t
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like form
        take t-1, like t
        take t-2, like a

  task allocator, name <allocator>
    note <Returns a reference to the underlying allocator.>

    take b
      like box
        like t
          cite free
        like a
          cite free

    free seed
      like a

  task leak, name <leak>
    note <Consumes and leaks the Box, returning a mutable reference, &'a mut T. Note that the type T must outlive the chosen lifetime 'a. If the type has only static references, or none at all, then this may be chosen to be 'static.>

    lead a
      time a

    time a

    take b
      like box
        like t
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like t
        time a

  task into-pin, name <into_pin>
    note <Converts a Box&lt;T&gt; into a Pin&lt;Box&lt;T&gt;&gt;>

    lead a
      time static

    take boxed
      like box
        like t
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like pin
        like box
          like t
            cite free
          like a
            cite free
          cite free
        cite free

  task downcast, name <downcast>
    note <Attempt to downcast the box to a concrete type.>

    lead t
      like any
        cite free

    head t

    take self
      cite free

    free seed
      like result
        like box
          like t
            cite free
          like a
            cite free
          cite free
        like box
          like any
            cite free
          like a
            cite free
          cite free
        cite free

  task downcast-unchecked, name <downcast_unchecked>
    note <Downcasts the box to a concrete type.>

    lead t
      like any
        cite free

    head t

    take self
      cite free

    free seed
      like box
        like t
          cite free
        like a
          cite free
        cite free

  task downcast, name <downcast>
    note <Attempt to downcast the box to a concrete type.>

    lead t
      like any
        cite free

    head t

    take self
      cite free

    free seed
      like result
        like box
          like t
            cite free
          like a
            cite free
          cite free
        like box
          like any
            cite free
          like a
            cite free
          cite free
        cite free

  task downcast-unchecked, name <downcast_unchecked>
    note <Downcasts the box to a concrete type.>

    lead t
      like any
        cite free

    head t

    take self
      cite free

    free seed
      like box
        like t
          cite free
        like a
          cite free
        cite free

  task downcast, name <downcast>
    note <Attempt to downcast the box to a concrete type.>

    lead t
      like any
        cite free

    head t

    take self
      cite free

    free seed
      like result
        like box
          like t
            cite free
          like a
            cite free
          cite free
        like box
          like any
            cite free
          like a
            cite free
          cite free
        cite free

  task downcast-unchecked, name <downcast_unchecked>
    note <Downcasts the box to a concrete type.>

    lead t
      like any
        cite free

    head t

    take self
      cite free

    free seed
      like box
        like t
          cite free
        like a
          cite free
        cite free

  task as-mut, name <as_mut>
    note <Performs the conversion.>

    take self
      cite free

    free seed
      like t

  task as-ref, name <as_ref>
    note <Performs the conversion.>

    take self
      cite free

    free seed
      like t

  task borrow, name <borrow>
    note <Immutably borrows from an owned value.>

    take self
      cite free

    free seed
      like t

  task borrow-mut, name <borrow_mut>
    note <Mutably borrows from an owned value.>

    take self
      cite free

    free seed
      like t

  task fill-buf, name <fill_buf>
    note <Returns the contents of the internal buffer, filling it with more data from the inner reader if it is empty.>

    take self
      cite free

    free seed
      like result
        list u8
        cite free

  task consume, name <consume>
    note <Tells this buffer that amt bytes have been consumed from the buffer, so they should no longer be returned in calls to read.>

    take self
      cite free
    take amt
      like usize
        cite free
      cite free

  task read-until, name <read_until>
    note <Read all bytes into buf until the delimiter byte or EOF is reached.>

    take self
      cite free
    take byte
      like u8
        cite free
      cite free
    take buf
      like vec
        like u8
          cite free
      lock free

    free seed
      like result
        like usize
          cite free
        cite free

  task read-line, name <read_line>
    note <Read all bytes until a newline (the 0xA byte) is reached, and append them to the provided buffer.>

    take self
      cite free
    take buf
      like string
      lock free

    free seed
      like result
        like usize
          cite free
        cite free

  task has-data-left, name <has_data_left>
    note <Check if the underlying Read has any data left to be read.>

    take self
      cite free

    free seed
      like result
        like bool
          cite free
        cite free

  task split, name <split>
    note <Returns an iterator over the contents of this reader split on the byte byte.>

    lead self
      like sized
        cite free

    take self
      cite free
    take byte
      like u8
        cite free
      cite free

    free seed
      like split
        like self
          cite free
        cite free

  task lines, name <lines>
    note <Returns an iterator over the lines of this reader.>

    lead self
      like sized
        cite free

    take self
      cite free

    free seed
      like lines
        like self
          cite free
        cite free

  task clone, name <clone>
    note <Returns a copy of the value.>

    take self
      cite free

    free seed
      like box
        list t
        like a
          cite free
        cite free

  task clone-from, name <clone_from>
    note <Performs copy-assignment from source.>

    take self
      cite free
    take other
      like box
        list t
        like a
          cite free

  task clone, name <clone>
    note <Returns a copy of the value.>

    take self
      cite free

    free seed
      like box
        like str
          cite free
        like global
          cite free
        cite free

  task clone-from, name <clone_from>
    note <Performs copy-assignment from source.>

    take self
      cite free
    take source
      like self

  task clone, name <clone>
    note <Returns a new box with a clone() of this box's contents.>

    take self
      cite free

    free seed
      like box
        like t
          cite free
        like a
          cite free
        cite free

  task clone-from, name <clone_from>
    note <Copies source's contents into self without creating a new allocation.>

    take self
      cite free
    take source
      like box
        like t
          cite free
        like a
          cite free

  task clone, name <clone>
    note <Returns a copy of the value.>

    take self
      cite free

    free seed
      like self
        cite free

  task clone-from, name <clone_from>
    note <Performs copy-assignment from source.>

    take self
      cite free
    take source
      like self

  task clone, name <clone>
    note <Returns a copy of the value.>

    take self
      cite free

    free seed
      like self
        cite free

  task clone-from, name <clone_from>
    note <Performs copy-assignment from source.>

    take self
      cite free
    take source
      like self

  task clone, name <clone>
    note <Returns a copy of the value.>

    take self
      cite free

    free seed
      like self
        cite free

  task clone-from, name <clone_from>
    note <Performs copy-assignment from source.>

    take self
      cite free
    take source
      like self

  task fmt, name <fmt>
    note <Formats the value using the given formatter.>

    take self
      cite free
    take f
      like formatter
        time mask
      lock free

    free seed
      like result
        like form
        like error
          cite free
        cite free

  task default, name <default>
    note <Returns the “default value” for a type.>

    free seed
      like box
        list t
        like global
          cite free
        cite free

  task default, name <default>
    note <Creates a Box&lt;T&gt;, with the Default value for T.>

    free seed
      like box
        like t
          cite free
        like global
          cite free
        cite free

  task default, name <default>
    note <Returns the “default value” for a type.>

    free seed
      like box
        like str
          cite free
        like global
          cite free
        cite free

  task default, name <default>
    note <Returns the “default value” for a type.>

    free seed
      like box
        like c-str
          cite free
        cite free

  task default, name <default>
    note <Returns the “default value” for a type.>

    free seed
      like box
        like os-str
          cite free
        cite free

  task deref, name <deref>
    note <Dereferences the value.>

    take self
      cite free

    free seed
      like t

  task deref-mut, name <deref_mut>
    note <Mutably dereferences the value.>

    take self
      cite free

    free seed
      like t

  task fmt, name <fmt>
    note <Formats the value using the given formatter.>

    take self
      cite free
    take f
      like formatter
        time mask
      lock free

    free seed
      like result
        like form
        like error
          cite free
        cite free

  task next-back, name <next_back>
    note <Removes and returns an element from the end of the iterator.>

    cast c-1
      like i
      like iterator

    take self
      cite free

    free seed
      like option
        like c-1/item
        cite free

  task nth-back, name <nth_back>
    note <Returns the nth element from the end of the iterator.>

    cast c-1
      like i
      like iterator

    take self
      cite free
    take n
      like usize
        cite free
      cite free

    free seed
      like option
        like c-1/item
        cite free

  task advance-back-by, name <advance_back_by>
    note <Advances the iterator from the back by n elements.>

    take self
      cite free
    take n
      like usize
        cite free
      cite free

    free seed
      like result
        like form
        like usize
          cite free
        cite free

  task try-rfold, name <try_rfold>
    note <This is the reverse version of Iterator::try_fold(): it takes elements starting from the back of the iterator.>

    lead f
      like fn-mut
        take f-1, like b
        take f-2
          like self/item
        free seed
          like r
            cite free
    lead r
      like try
        like output
          cite free
          fall back
            like b
              cite free
        cite free

    head b
    head f
    head r

    take self
      cite free
    take init
      like b
        cite free
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like r
        cite free

  task rfold, name <rfold>
    note <An iterator method that reduces the iterator's elements to a single, final value, starting from the back.>

    lead f
      like fn-mut
        take f-1, like b
        take f-2
          like self/item
        free seed
          like b
            cite free

    head b
    head f

    take self
      cite free
    take init
      like b
        cite free
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like b
        cite free

  task rfind, name <rfind>
    note <Searches for an element of an iterator from the back that satisfies a predicate.>

    lead p
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free

    head p

    take self
      cite free
    take predicate
      like p
        cite free
      cite free

    free seed
      like option
        like self/item
        cite free

  task drop, name <drop>
    note <Executes the destructor for this type.>

    take self
      cite free

  task description, name <description>
    take self
      cite free

    free seed
      like str

  task cause, name <cause>
    take self
      cite free

    free seed
      like option
        like error
          cite free
        cite free

  task source, name <source>
    note <The lower-level source of this error, if any.>

    take self
      cite free

    free seed
      like option
        like error
          cite free
        cite free

  task backtrace, name <backtrace>
    note <Returns a stack backtrace, if available, of where this error occurred.>

    take self
      cite free

    free seed
      like option
        like backtrace
        cite free

  task len, name <len>
    note <Returns the exact length of the iterator.>

    take self
      cite free

    free seed
      like usize
        cite free

  task is-empty, name <is_empty>
    note <Returns true if the iterator is empty.>

    take self
      cite free

    free seed
      like bool
        cite free

  task extend, name <extend>
    note <Extends a collection with the contents of an iterator.>

    lead i
      like into-iterator
        like item
          cite free
          fall back
            like box
              like str
                cite free
              like global
                cite free
              cite free
        cite free

    head i

    take self
      cite free
    take iter
      like i
        cite free
      cite free

  task extend-one, name <extend_one>
    note <Extends a collection with exactly one element.>

    take self
      cite free
    take item
      like a
        cite free
      cite free

  task extend-reserve, name <extend_reserve>
    note <Reserves capacity in a collection for the given number of additional elements.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

  task from, name <from>
    note <Converts a &[T] into a Box&lt;[T]&gt;>

    take slice
      list t
      cite free

    free seed
      like box
        list t
        like global
          cite free
        cite free

  task from, name <from>
    note <Performs the conversion.>

    take s
      like c-str

    free seed
      like box
        like c-str
          cite free
        cite free

  task from, name <from>
    note <Performs the conversion.>

    take s
      like os-str

    free seed
      like box
        like os-str
          cite free
        cite free

  task from, name <from>
    note <Creates a boxed Path from a reference.>

    take path
      like path

    free seed
      like box
        like path
          cite free
        cite free

  task from, name <from>
    note <Converts a &str into a Box&lt;str&gt;>

    take s
      like str

    free seed
      like box
        like str
          cite free
        like global
          cite free
        cite free

  task from, name <from>
    note <Converts a str into a box of dyn Error + Send + Sync.>

    take err
      like str

    free seed
      like box
        like error
          cite free
        cite free

  task from, name <from>
    note <Converts a str into a box of dyn Error.>

    take err
      like str

    free seed
      like box
        like error
          cite free
        cite free

  task from, name <from>
    note <Converts a [T; N] into a Box&lt;[T]&gt;>

    take array
      like list
        like t
        name n
      cite free

    free seed
      like box
        list t
        like global
          cite free
        cite free

  task from, name <from>
    note <Convert a boxed slice into a vector by transferring ownership of the existing heap allocation.>

    take s
      like box
        list t
        like a
          cite free
        cite free
      cite free

    free seed
      like vec
        like t
          cite free
        like a
          cite free
        cite free

  task from, name <from>
    note <Converts a Box&lt;CStr&gt; into a CString without copying or allocating.>

    take s
      like box
        like c-str
          cite free
        cite free
      cite free

    free seed
      like c-string
        cite free

  task from, name <from>
    note <Converts a Box&lt;OsStr&gt; into an OsString without copying or allocating.>

    take boxed
      like box
        like os-str
          cite free
        cite free
      cite free

    free seed
      like os-string
        cite free

  task from, name <from>
    note <Converts a Box&lt;Path&gt; into a PathBuf>

    take boxed
      like box
        like path
          cite free
        cite free
      cite free

    free seed
      like path-buf
        cite free

  task from, name <from>
    note <Converts a Box&lt;T&gt; into a Pin&lt;Box&lt;T&gt;&gt;>

    take boxed
      like box
        like t
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like pin
        like box
          like t
            cite free
          like a
            cite free
          cite free
        cite free

  task from, name <from>
    note <Move a boxed object to a new, reference-counted allocation.>

    take v
      like box
        like t
          cite free
        like global
          cite free
        cite free
      cite free

    free seed
      like arc
        like t
          cite free
        cite free

  task from, name <from>
    note <Move a boxed object to a new, reference counted, allocation.>

    take v
      like box
        like t
          cite free
        like global
          cite free
        cite free
      cite free

    free seed
      like rc
        like t
          cite free
        cite free

  task from, name <from>
    note <Converts a Box&lt;str&gt; into a Box&lt;[u8]&gt;>

    take s
      like box
        like str
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like box
        list u8
        like a
          cite free
        cite free

  task from, name <from>
    note <Converts the given boxed str slice to a String. It is notable that the str slice is owned.>

    take s
      like box
        like str
          cite free
        like global
          cite free
        cite free
      cite free

    free seed
      like string
        cite free

  task from, name <from>
    note <Converts a CString into a Box&lt;CStr&gt; without copying or allocating.>

    take s
      like c-string
        cite free
      cite free

    free seed
      like box
        like c-str
          cite free
        cite free

  task from, name <from>
    note <Converts a Cow&lt;'_, [T]&gt; into a Box&lt;[T]&gt;>

    take cow
      like cow
        time mask
        list t
        cite free
      cite free

    free seed
      like box
        list t
        like global
          cite free
        cite free

  task from, name <from>
    note <Performs the conversion.>

    take cow
      like cow
        time mask
        like c-str
          cite free
        cite free
      cite free

    free seed
      like box
        like c-str
          cite free
        cite free

  task from, name <from>
    note <Performs the conversion.>

    take cow
      like cow
        time mask
        like os-str
          cite free
        cite free
      cite free

    free seed
      like box
        like os-str
          cite free
        cite free

  task from, name <from>
    note <Creates a boxed Path from a clone-on-write pointer.>

    take cow
      like cow
        time mask
        like path
          cite free
        cite free
      cite free

    free seed
      like box
        like path
          cite free
        cite free

  task from, name <from>
    note <Converts a Cow&lt;'_, str&gt; into a Box&lt;str&gt;>

    take cow
      like cow
        time mask
        like str
          cite free
        cite free
      cite free

    free seed
      like box
        like str
          cite free
        like global
          cite free
        cite free

  task from, name <from>
    note <Converts a Cow into a box of dyn Error.>

    take err
      like cow
        time a
        like str
          cite free
        cite free
      cite free

    free seed
      like box
        like error
          cite free
        cite free

  task from, name <from>
    note <Converts a Cow into a box of dyn Error + Send + Sync.>

    take err
      like cow
        time b
        like str
          cite free
        cite free
      cite free

    free seed
      like box
        like error
          cite free
        cite free

  task from, name <from>
    note <Converts a type of Error into a box of dyn Error.>

    take err
      like e
        cite free
      cite free

    free seed
      like box
        like error
          cite free
        cite free

  task from, name <from>
    note <Converts a type of Error + Send + Sync into a box of dyn Error + Send + Sync.>

    take err
      like e
        cite free
      cite free

    free seed
      like box
        like error
          cite free
        cite free

  task from, name <from>
    note <Converts an OsString into a Box&lt;OsStr&gt; without copying or allocating.>

    take s
      like os-string
        cite free
      cite free

    free seed
      like box
        like os-str
          cite free
        cite free

  task from, name <from>
    note <Converts a PathBuf into a Box&lt;Path&gt;>

    take p
      like path-buf
        cite free
      cite free

    free seed
      like box
        like path
          cite free
        cite free

  task from, name <from>
    note <Converts the given String to a boxed str slice that is owned.>

    take s
      like string
        cite free
      cite free

    free seed
      like box
        like str
          cite free
        like global
          cite free
        cite free

  task from, name <from>
    note <Converts a String into a box of dyn Error + Send + Sync.>

    take err
      like string
        cite free
      cite free

    free seed
      like box
        like error
          cite free
        cite free

  task from, name <from>
    note <Converts a String into a box of dyn Error.>

    take str-err
      like string
        cite free
      cite free

    free seed
      like box
        like error
          cite free
        cite free

  task from, name <from>
    note <Converts a T into a Box&lt;T&gt;>

    take t
      like t
        cite free
      cite free

    free seed
      like box
        like t
          cite free
        like global
          cite free
        cite free

  task from, name <from>
    note <Convert a vector into a boxed slice.>

    take v
      like vec
        like t
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like box
        list t
        like a
          cite free
        cite free

  task from-iter, name <from_iter>
    note <Creates a value from an iterator.>

    lead i
      like into-iterator
        like item
          cite free
          fall back
            like box
              like str
                cite free
              like global
                cite free
              cite free
        cite free

    head i

    take iter
      like i
        cite free
      cite free

    free seed
      like string
        cite free

  task from-iter, name <from_iter>
    note <Creates a value from an iterator.>

    lead t
      like into-iterator
        like item
          cite free
          fall back
            like i
              cite free
        cite free

    head t

    take iter
      like t
        cite free
      cite free

    free seed
      like box
        list i
        like global
          cite free
        cite free

  task poll, name <poll>
    note <Attempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available.>

    cast c-1
      like box
        like f
          cite free
        like a
          cite free
      like future

    take self
      like pin
        like box
          like f
            cite free
          like a
            cite free
        cite free
      cite free
    take cx
      like context
        time mask
      lock free

    free seed
      like poll
        like c-1/output
        cite free

  task resume, name <resume>
    note <Resumes the execution of this generator.>

    cast c-1
      like box
        like g
          cite free
        like a
          cite free
      like generator
        like r
          cite free
    cast c-2
      like box
        like g
          cite free
        like a
          cite free
      like generator
        like r
          cite free

    take self
      like pin
        like box
          like g
            cite free
          like a
            cite free
        cite free
      cite free
    take arg
      like r
        cite free
      cite free

    free seed
      like generator-state
        like c-1/yield
        like c-2/return
        cite free

  task hash, name <hash>
    note <Feeds this value into the given Hasher.>

    lead h
      like hasher
        cite free

    head h

    take self
      cite free
    take state
      like h
      lock free

  task hash-slice, name <hash_slice>
    note <Feeds a slice of this type into the given Hasher.>

    lead h
      like hasher
        cite free

    head h

    take data
      list self
      cite free
    take state
      like h
      lock free

  task finish, name <finish>
    note <Returns the hash value for the values written so far.>

    take self
      cite free

    free seed
      like u64
        cite free

  task write, name <write>
    note <Writes some data into this Hasher.>

    take self
      cite free
    take bytes
      list u8
      cite free

  task write-u8, name <write_u8>
    note <Writes a single u8 into this hasher.>

    take self
      cite free
    take i
      like u8
        cite free
      cite free

  task write-u16, name <write_u16>
    note <Writes a single u16 into this hasher.>

    take self
      cite free
    take i
      like u16
        cite free
      cite free

  task write-u32, name <write_u32>
    note <Writes a single u32 into this hasher.>

    take self
      cite free
    take i
      like u32
        cite free
      cite free

  task write-u64, name <write_u64>
    note <Writes a single u64 into this hasher.>

    take self
      cite free
    take i
      like u64
        cite free
      cite free

  task write-u128, name <write_u128>
    note <Writes a single u128 into this hasher.>

    take self
      cite free
    take i
      like u128
        cite free
      cite free

  task write-usize, name <write_usize>
    note <Writes a single usize into this hasher.>

    take self
      cite free
    take i
      like usize
        cite free
      cite free

  task write-i8, name <write_i8>
    note <Writes a single i8 into this hasher.>

    take self
      cite free
    take i
      like i8
        cite free
      cite free

  task write-i16, name <write_i16>
    note <Writes a single i16 into this hasher.>

    take self
      cite free
    take i
      like i16
        cite free
      cite free

  task write-i32, name <write_i32>
    note <Writes a single i32 into this hasher.>

    take self
      cite free
    take i
      like i32
        cite free
      cite free

  task write-i64, name <write_i64>
    note <Writes a single i64 into this hasher.>

    take self
      cite free
    take i
      like i64
        cite free
      cite free

  task write-i128, name <write_i128>
    note <Writes a single i128 into this hasher.>

    take self
      cite free
    take i
      like i128
        cite free
      cite free

  task write-isize, name <write_isize>
    note <Writes a single isize into this hasher.>

    take self
      cite free
    take i
      like isize
        cite free
      cite free

  task next, name <next>
    note <Advances the iterator and returns the next value.>

    cast c-1
      like i
      like iterator

    take self
      cite free

    free seed
      like option
        like c-1/item
        cite free

  task size-hint, name <size_hint>
    note <Returns the bounds on the remaining length of the iterator.>

    take self
      cite free

    free seed
      like form
        take t-1, like usize
        take t-2, like option

  task nth, name <nth>
    note <Returns the nth element of the iterator.>

    cast c-1
      like i
      like iterator

    take self
      cite free
    take n
      like usize
        cite free
      cite free

    free seed
      like option
        like c-1/item
        cite free

  task last, name <last>
    note <Consumes the iterator, returning the last element.>

    cast c-1
      like i
      like iterator

    take self
      cite free

    free seed
      like option
        like c-1/item
        cite free

  task count, name <count>
    note <Consumes the iterator, counting the number of iterations and returning it.>

    take self
      cite free

    free seed
      like usize
        cite free

  task advance-by, name <advance_by>
    note <Advances the iterator by n elements.>

    take self
      cite free
    take n
      like usize
        cite free
      cite free

    free seed
      like result
        like form
        like usize
          cite free
        cite free

  task step-by, name <step_by>
    note <Creates an iterator starting at the same point, but stepping by the given amount at each iteration.>

    take self
      cite free
    take step
      like usize
        cite free
      cite free

    free seed
      like step-by
        like self
          cite free
        cite free

  task chain, name <chain>
    note <Takes two iterators and creates a new iterator over both in sequence.>

    cast c-1
      like u
      like into-iterator

    lead u
      like into-iterator
        like item
          cite free
          fall back
            like self/item
        cite free

    head u

    take self
      cite free
    take other
      like u
        cite free
      cite free

    free seed
      like chain
        like self
          cite free
        like c-1/into-iter
        cite free

  task zip, name <zip>
    note <‘Zips up' two iterators into a single iterator of pairs.>

    cast c-1
      like u
      like into-iterator

    lead u
      like into-iterator
        cite free

    head u

    take self
      cite free
    take other
      like u
        cite free
      cite free

    free seed
      like zip
        like self
          cite free
        like c-1/into-iter
        cite free

  task intersperse, name <intersperse>
    note <Creates a new iterator which places a copy of separator between adjacent items of the original iterator.>

    lead self/item
      like clone
        cite free

    take self
      cite free
    take separator
      like self/item
      cite free

    free seed
      like intersperse
        like self
          cite free
        cite free

  task intersperse-with, name <intersperse_with>
    note <Creates a new iterator which places an item generated by separator between adjacent items of the original iterator.>

    lead g
      like fn-mut
        free seed
          like self/item

    head g

    take self
      cite free
    take separator
      like g
        cite free
      cite free

    free seed
      like intersperse-with
        like self
          cite free
        like g
          cite free
        cite free

  task map, name <map>
    note <Takes a closure and creates an iterator which calls that closure on each element.>

    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like b
            cite free

    head b
    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like map
        like self
          cite free
        like f
          cite free
        cite free

  task for-each, name <for_each>
    note <Calls a closure on each element of an iterator.>

    lead f
      like fn-mut
        take f-1
          like self/item

    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

  task filter, name <filter>
    note <Creates an iterator which uses a closure to determine if an element should be yielded.>

    lead p
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free

    head p

    take self
      cite free
    take predicate
      like p
        cite free
      cite free

    free seed
      like filter
        like self
          cite free
        like p
          cite free
        cite free

  task filter-map, name <filter_map>
    note <Creates an iterator that both filters and maps.>

    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like option
            like b
              cite free
            cite free

    head b
    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like filter-map
        like self
          cite free
        like f
          cite free
        cite free

  task enumerate, name <enumerate>
    note <Creates an iterator which gives the current iteration count as well as the next value.>

    take self
      cite free

    free seed
      like enumerate
        like self
          cite free
        cite free

  task peekable, name <peekable>
    note <Creates an iterator which can use the peek and peek_mut methods to look at the next element of the iterator without consuming it. See their documentation for more information.>

    take self
      cite free

    free seed
      like peekable
        like self
          cite free
        cite free

  task skip-while, name <skip_while>
    note <Creates an iterator that skips elements based on a predicate.>

    lead p
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free

    head p

    take self
      cite free
    take predicate
      like p
        cite free
      cite free

    free seed
      like skip-while
        like self
          cite free
        like p
          cite free
        cite free

  task take-while, name <take_while>
    note <Creates an iterator that yields elements based on a predicate.>

    lead p
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free

    head p

    take self
      cite free
    take predicate
      like p
        cite free
      cite free

    free seed
      like take-while
        like self
          cite free
        like p
          cite free
        cite free

  task map-while, name <map_while>
    note <Creates an iterator that both yields elements based on a predicate and maps.>

    lead p
      like fn-mut
        take f-1
          like self/item
        free seed
          like option
            like b
              cite free
            cite free

    head b
    head p

    take self
      cite free
    take predicate
      like p
        cite free
      cite free

    free seed
      like map-while
        like self
          cite free
        like p
          cite free
        cite free

  task skip, name <skip>
    note <Creates an iterator that skips the first n elements.>

    take self
      cite free
    take n
      like usize
        cite free
      cite free

    free seed
      like skip
        like self
          cite free
        cite free

  task take, name <take>
    note <Creates an iterator that yields the first n elements, or fewer if the underlying iterator ends sooner.>

    take self
      cite free
    take n
      like usize
        cite free
      cite free

    free seed
      like take
        like self
          cite free
        cite free

  task scan, name <scan>
    note <An iterator adapter similar to fold that holds internal state and produces a new iterator.>

    lead f
      like fn-mut
        take f-1, like st
        take f-2
          like self/item
        free seed
          like option
            like b
              cite free
            cite free

    head st
    head b
    head f

    take self
      cite free
    take initial-state
      like st
        cite free
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like scan
        like self
          cite free
        like st
          cite free
        like f
          cite free
        cite free

  task flat-map, name <flat_map>
    note <Creates an iterator that works like map, but flattens nested structure.>

    lead u
      like into-iterator
        cite free
    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like u
            cite free

    head u
    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like flat-map
        like self
          cite free
        like u
          cite free
        like f
          cite free
        cite free

  task flatten, name <flatten>
    note <Creates an iterator that flattens nested structure.>

    lead self/item
      like into-iterator
        cite free

    take self
      cite free

    free seed
      like flatten
        like self
          cite free
        cite free

  task fuse, name <fuse>
    note <Creates an iterator which ends after the first None.>

    take self
      cite free

    free seed
      like fuse
        like self
          cite free
        cite free

  task inspect, name <inspect>
    note <Does something with each element of an iterator, passing the value on.>

    lead f
      like fn-mut
        take f-1
          like self/item

    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like inspect
        like self
          cite free
        like f
          cite free
        cite free

  task by-ref, name <by_ref>
    note <Borrows an iterator, rather than consuming it.>

    take self
      cite free

    free seed
      like self

  task collect, name <collect>
    note <Transforms an iterator into a collection.>

    lead b
      like from-iterator
        like self/item
        cite free

    head b

    take self
      cite free

    free seed
      like b
        cite free

  task partition, name <partition>
    note <Consumes an iterator, creating two collections from it.>

    lead b
      like default
        cite free
    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free

    head b
    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like form
        take t-1, like b
        take t-2, like b

  task partition-in-place, name <partition_in_place>
    note <Reorders the elements of this iterator in-place according to the given predicate, such that all those that return true precede all those that return false. Returns the number of true elements found.>

    lead t
      time a
    lead self
      like double-ended-iterator
        like item
          cite free
          fall back
            like t
              time a
        cite free
    lead p
      like fn-mut
        take f-1, like t
        free seed
          like bool
            cite free

    time a

    head t
    head p

    take self
      cite free
    take predicate
      like p
        cite free
      cite free

    free seed
      like usize
        cite free

  task is-partitioned, name <is_partitioned>
    note <Checks if the elements of this iterator are partitioned according to the given predicate, such that all those that return true precede all those that return false.>

    lead p
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free

    head p

    take self
      cite free
    take predicate
      like p
        cite free
      cite free

    free seed
      like bool
        cite free

  task try-fold, name <try_fold>
    note <An iterator method that applies a function as long as it returns successfully, producing a single, final value.>

    lead f
      like fn-mut
        take f-1, like b
        take f-2
          like self/item
        free seed
          like r
            cite free
    lead r
      like try
        like output
          cite free
          fall back
            like b
              cite free
        cite free

    head b
    head f
    head r

    take self
      cite free
    take init
      like b
        cite free
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like r
        cite free

  task try-for-each, name <try_for_each>
    note <An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.>

    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like r
            cite free
    lead r
      like try
        like output
          cite free
          fall back
            like form
        cite free

    head f
    head r

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like r
        cite free

  task fold, name <fold>
    note <Folds every element into an accumulator by applying an operation, returning the final result.>

    lead f
      like fn-mut
        take f-1, like b
        take f-2
          like self/item
        free seed
          like b
            cite free

    head b
    head f

    take self
      cite free
    take init
      like b
        cite free
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like b
        cite free

  task reduce, name <reduce>
    note <Reduces the elements to a single one, by repeatedly applying a reducing operation.>

    lead f
      like fn-mut
        take f-1
          like self/item
        take f-2
          like self/item
        free seed
          like self/item

    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like option
        like self/item
        cite free

  task try-reduce, name <try_reduce>
    note <Reduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately.>

    cast c-1
      like r
      like try
    cast c-3
      like r
      like try
    cast c-4
      like r
      like try
    cast c-2
      like c-3/residual
      like residual
        like option
          like c-4/output
          cite free

    lead f
      like fn-mut
        take f-1
          like self/item
        take f-2
          like self/item
        free seed
          like r
            cite free
    lead r
      like try
        like output
          cite free
          fall back
            like self/item
        cite free
    lead c-1/residual
      like residual
        like option
          like self/item
          cite free
        cite free

    head f
    head r

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like c-2/try-type

  task all, name <all>
    note <Tests if every element of the iterator matches a predicate.>

    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free

    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like bool
        cite free

  task any, name <any>
    note <Tests if any element of the iterator matches a predicate.>

    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free

    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like bool
        cite free

  task find, name <find>
    note <Searches for an element of an iterator that satisfies a predicate.>

    lead p
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free

    head p

    take self
      cite free
    take predicate
      like p
        cite free
      cite free

    free seed
      like option
        like self/item
        cite free

  task find-map, name <find_map>
    note <Applies function to the elements of iterator and returns the first non-none result.>

    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like option
            like b
              cite free
            cite free

    head b
    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like option
        like b
          cite free
        cite free

  task try-find, name <try_find>
    note <Applies function to the elements of iterator and returns the first true result or the first error.>

    cast c-1
      like r
      like try
    cast c-3
      like r
      like try
    cast c-2
      like c-3/residual
      like residual
        like option
          like self/item
          cite free

    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like r
            cite free
    lead r
      like try
        like output
          cite free
          fall back
            like bool
              cite free
        cite free
    lead c-1/residual
      like residual
        like option
          like self/item
          cite free
        cite free

    head f
    head r

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like c-2/try-type

  task position, name <position>
    note <Searches for an element in an iterator, returning its index.>

    lead p
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free

    head p

    take self
      cite free
    take predicate
      like p
        cite free
      cite free

    free seed
      like option
        like usize
          cite free
        cite free

  task rposition, name <rposition>
    note <Searches for an element in an iterator from the right, returning its index.>

    lead p
      like fn-mut
        take f-1
          like self/item
        free seed
          like bool
            cite free
    lead self
      like exact-size-iterator
        cite free

    head p

    take self
      cite free
    take predicate
      like p
        cite free
      cite free

    free seed
      like option
        like usize
          cite free
        cite free

  task max, name <max>
    note <Returns the maximum element of an iterator.>

    lead self/item
      like ord
        cite free

    take self
      cite free

    free seed
      like option
        like self/item
        cite free

  task min, name <min>
    note <Returns the minimum element of an iterator.>

    lead self/item
      like ord
        cite free

    take self
      cite free

    free seed
      like option
        like self/item
        cite free

  task max-by-key, name <max_by_key>
    note <Returns the element that gives the maximum value from the specified function.>

    lead b
      like ord
        cite free
    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like b
            cite free

    head b
    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like option
        like self/item
        cite free

  task max-by, name <max_by>
    note <Returns the element that gives the maximum value with respect to the specified comparison function.>

    lead f
      like fn-mut
        take f-1
          like self/item
        take f-2
          like self/item
        free seed
          like ordering
            cite free

    head f

    take self
      cite free
    take compare
      like f
        cite free
      cite free

    free seed
      like option
        like self/item
        cite free

  task min-by-key, name <min_by_key>
    note <Returns the element that gives the minimum value from the specified function.>

    lead b
      like ord
        cite free
    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like b
            cite free

    head b
    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like option
        like self/item
        cite free

  task min-by, name <min_by>
    note <Returns the element that gives the minimum value with respect to the specified comparison function.>

    lead f
      like fn-mut
        take f-1
          like self/item
        take f-2
          like self/item
        free seed
          like ordering
            cite free

    head f

    take self
      cite free
    take compare
      like f
        cite free
      cite free

    free seed
      like option
        like self/item
        cite free

  task rev, name <rev>
    note <Reverses an iterator's direction.>

    lead self
      like double-ended-iterator
        cite free

    take self
      cite free

    free seed
      like rev
        like self
          cite free
        cite free

  task unzip, name <unzip>
    note <Converts an iterator of pairs into a pair of containers.>

    lead from-a
      like default
        cite free
    lead from-b
      like default
        cite free
    lead self
      like iterator
        like item
          cite free
          fall back
            like form
              take t-1, like a
              take t-2, like b
        cite free

    head a
    head b
    head from-a
    head from-b

    take self
      cite free

    free seed
      like form
        take t-1, like from-a
        take t-2, like from-b

  task copied, name <copied>
    note <Creates an iterator which copies all of its elements.>

    lead t
      time a
      base copy
        cite free
    lead self
      like iterator
        like item
          cite free
          fall back
            like t
              time a
        cite free

    time a

    head t

    take self
      cite free

    free seed
      like copied
        like self
          cite free
        cite free

  task cloned, name <cloned>
    note <Creates an iterator which clones all of its elements.>

    lead t
      time a
      base clone
        cite free
    lead self
      like iterator
        like item
          cite free
          fall back
            like t
              time a
        cite free

    time a

    head t

    take self
      cite free

    free seed
      like cloned
        like self
          cite free
        cite free

  task cycle, name <cycle>
    note <Repeats an iterator endlessly.>

    lead self
      like clone
        cite free

    take self
      cite free

    free seed
      like cycle
        like self
          cite free
        cite free

  task sum, name <sum>
    note <Sums the elements of an iterator.>

    lead s
      like sum
        like self/item
        cite free

    head s

    take self
      cite free

    free seed
      like s
        cite free

  task product, name <product>
    note <Iterates over the entire iterator, multiplying all the elements>

    lead p
      like product
        like self/item
        cite free

    head p

    take self
      cite free

    free seed
      like p
        cite free

  task cmp, name <cmp>
    note <Lexicographically compares the elements of this Iterator with those of another.>

    lead i
      like into-iterator
        like item
          cite free
          fall back
            like self/item
        cite free
    lead self/item
      like ord
        cite free

    head i

    take self
      cite free
    take other
      like i
        cite free
      cite free

    free seed
      like ordering
        cite free

  task cmp-by, name <cmp_by>
    note <Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function.>

    cast c-1
      like i
      like into-iterator

    lead i
      like into-iterator
        cite free
    lead f
      like fn-mut
        take f-1
          like self/item
        take f-2
          like c-1/item
        free seed
          like ordering
            cite free

    head i
    head f

    take self
      cite free
    take other
      like i
        cite free
      cite free
    take cmp
      like f
        cite free
      cite free

    free seed
      like ordering
        cite free

  task partial-cmp, name <partial_cmp>
    note <Lexicographically compares the elements of this Iterator with those of another.>

    cast c-1
      like i
      like into-iterator

    lead i
      like into-iterator
        cite free
    lead self/item
      like partial-ord
        like c-1/item
        cite free

    head i

    take self
      cite free
    take other
      like i
        cite free
      cite free

    free seed
      like option
        like ordering
          cite free
        cite free

  task partial-cmp-by, name <partial_cmp_by>
    note <Lexicographically compares the elements of this Iterator with those of another with respect to the specified comparison function.>

    cast c-1
      like i
      like into-iterator

    lead i
      like into-iterator
        cite free
    lead f
      like fn-mut
        take f-1
          like self/item
        take f-2
          like c-1/item
        free seed
          like option
            like ordering
              cite free
            cite free

    head i
    head f

    take self
      cite free
    take other
      like i
        cite free
      cite free
    take partial-cmp
      like f
        cite free
      cite free

    free seed
      like option
        like ordering
          cite free
        cite free

  task eq, name <eq>
    note <Determines if the elements of this Iterator are equal to those of another.>

    cast c-1
      like i
      like into-iterator

    lead i
      like into-iterator
        cite free
    lead self/item
      like partial-eq
        like c-1/item
        cite free

    head i

    take self
      cite free
    take other
      like i
        cite free
      cite free

    free seed
      like bool
        cite free

  task eq-by, name <eq_by>
    note <Determines if the elements of this Iterator are equal to those of another with respect to the specified equality function.>

    cast c-1
      like i
      like into-iterator

    lead i
      like into-iterator
        cite free
    lead f
      like fn-mut
        take f-1
          like self/item
        take f-2
          like c-1/item
        free seed
          like bool
            cite free

    head i
    head f

    take self
      cite free
    take other
      like i
        cite free
      cite free
    take eq
      like f
        cite free
      cite free

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <Determines if the elements of this Iterator are unequal to those of another.>

    cast c-1
      like i
      like into-iterator

    lead i
      like into-iterator
        cite free
    lead self/item
      like partial-eq
        like c-1/item
        cite free

    head i

    take self
      cite free
    take other
      like i
        cite free
      cite free

    free seed
      like bool
        cite free

  task lt, name <lt>
    note <Determines if the elements of this Iterator are lexicographically less than those of another.>

    cast c-1
      like i
      like into-iterator

    lead i
      like into-iterator
        cite free
    lead self/item
      like partial-ord
        like c-1/item
        cite free

    head i

    take self
      cite free
    take other
      like i
        cite free
      cite free

    free seed
      like bool
        cite free

  task le, name <le>
    note <Determines if the elements of this Iterator are lexicographically less or equal to those of another.>

    cast c-1
      like i
      like into-iterator

    lead i
      like into-iterator
        cite free
    lead self/item
      like partial-ord
        like c-1/item
        cite free

    head i

    take self
      cite free
    take other
      like i
        cite free
      cite free

    free seed
      like bool
        cite free

  task gt, name <gt>
    note <Determines if the elements of this Iterator are lexicographically greater than those of another.>

    cast c-1
      like i
      like into-iterator

    lead i
      like into-iterator
        cite free
    lead self/item
      like partial-ord
        like c-1/item
        cite free

    head i

    take self
      cite free
    take other
      like i
        cite free
      cite free

    free seed
      like bool
        cite free

  task ge, name <ge>
    note <Determines if the elements of this Iterator are lexicographically greater than or equal to those of another.>

    cast c-1
      like i
      like into-iterator

    lead i
      like into-iterator
        cite free
    lead self/item
      like partial-ord
        like c-1/item
        cite free

    head i

    take self
      cite free
    take other
      like i
        cite free
      cite free

    free seed
      like bool
        cite free

  task is-sorted, name <is_sorted>
    note <Checks if the elements of this iterator are sorted.>

    lead self/item
      like partial-ord
        like self/item
        cite free

    take self
      cite free

    free seed
      like bool
        cite free

  task is-sorted-by, name <is_sorted_by>
    note <Checks if the elements of this iterator are sorted using the given comparator function.>

    lead f
      like fn-mut
        take f-1
          like self/item
        take f-2
          like self/item
        free seed
          like option
            like ordering
              cite free
            cite free

    head f

    take self
      cite free
    take compare
      like f
        cite free
      cite free

    free seed
      like bool
        cite free

  task is-sorted-by-key, name <is_sorted_by_key>
    note <Checks if the elements of this iterator are sorted using the given key extraction function.>

    lead f
      like fn-mut
        take f-1
          like self/item
        free seed
          like k
            cite free
    lead k
      like partial-ord
        like k
          cite free
        cite free

    head f
    head k

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like bool
        cite free

  task cmp, name <cmp>
    note <This method returns an Ordering between self and other.>

    take self
      cite free
    take other
      like box
        like t
          cite free
        like a
          cite free

    free seed
      like ordering
        cite free

  task max, name <max>
    note <Compares and returns the maximum of two values.>

    take self
      cite free
    take other
      like self
        cite free
      cite free

    free seed
      like self
        cite free

  task min, name <min>
    note <Compares and returns the minimum of two values.>

    take self
      cite free
    take other
      like self
        cite free
      cite free

    free seed
      like self
        cite free

  task clamp, name <clamp>
    note <Restrict a value to a certain interval.>

    take self
      cite free
    take min
      like self
        cite free
      cite free
    take max
      like self
        cite free
      cite free

    free seed
      like self
        cite free

  task eq, name <eq>
    note <This method tests for self and other values to be equal, and is used by ==.>

    take self
      cite free
    take other
      like box
        like t
          cite free
        like a
          cite free

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <This method tests for !=.>

    take self
      cite free
    take other
      like box
        like t
          cite free
        like a
          cite free

    free seed
      like bool
        cite free

  task partial-cmp, name <partial_cmp>
    note <This method returns an ordering between self and other values if one exists.>

    take self
      cite free
    take other
      like box
        like t
          cite free
        like a
          cite free

    free seed
      like option
        like ordering
          cite free
        cite free

  task lt, name <lt>
    note <This method tests less than (for self and other) and is used by the &lt; operator.>

    take self
      cite free
    take other
      like box
        like t
          cite free
        like a
          cite free

    free seed
      like bool
        cite free

  task le, name <le>
    note <This method tests less than or equal to (for self and other) and is used by the &lt;= operator.>

    take self
      cite free
    take other
      like box
        like t
          cite free
        like a
          cite free

    free seed
      like bool
        cite free

  task ge, name <ge>
    note <This method tests greater than or equal to (for self and other) and is used by the &gt;= operator.>

    take self
      cite free
    take other
      like box
        like t
          cite free
        like a
          cite free

    free seed
      like bool
        cite free

  task gt, name <gt>
    note <This method tests greater than (for self and other) and is used by the &gt; operator.>

    take self
      cite free
    take other
      like box
        like t
          cite free
        like a
          cite free

    free seed
      like bool
        cite free

  task fmt, name <fmt>
    note <Formats the value using the given formatter.>

    take self
      cite free
    take f
      like formatter
        time mask
      lock free

    free seed
      like result
        like form
        like error
          cite free
        cite free

  task read, name <read>
    note <Pull some bytes from this source into the specified buffer, returning how many bytes were read.>

    take self
      cite free
    take buf
      list u8
      cite free

    free seed
      like result
        like usize
          cite free
        cite free

  task read-buf, name <read_buf>
    note <Pull some bytes from this source into the specified buffer.>

    take self
      cite free
    take buf
      like read-buf
        time mask
      lock free

    free seed
      like result
        like form
        cite free

  task read-vectored, name <read_vectored>
    note <Like read, except that it reads into a slice of buffers.>

    take self
      cite free
    take bufs
      like list
        like io-slice-mut
          time mask
      cite free

    free seed
      like result
        like usize
          cite free
        cite free

  task is-read-vectored, name <is_read_vectored>
    note <Determines if this Reader has an efficient read_vectored implementation.>

    take self
      cite free

    free seed
      like bool
        cite free

  task read-to-end, name <read_to_end>
    note <Read all bytes until EOF in this source, placing them into buf.>

    take self
      cite free
    take buf
      like vec
        like u8
          cite free
      lock free

    free seed
      like result
        like usize
          cite free
        cite free

  task read-to-string, name <read_to_string>
    note <Read all bytes until EOF in this source, appending them to buf.>

    take self
      cite free
    take buf
      like string
      lock free

    free seed
      like result
        like usize
          cite free
        cite free

  task read-exact, name <read_exact>
    note <Read the exact number of bytes required to fill buf.>

    take self
      cite free
    take buf
      list u8
      cite free

    free seed
      like result
        like form
        cite free

  task read-buf-exact, name <read_buf_exact>
    note <Read the exact number of bytes required to fill buf.>

    take self
      cite free
    take buf
      like read-buf
        time mask
      lock free

    free seed
      like result
        like form
        cite free

  task by-ref, name <by_ref>
    note <Creates a “by reference” adaptor for this instance of Read.>

    lead self
      like sized
        cite free

    take self
      cite free

    free seed
      like self

  task bytes, name <bytes>
    note <Transforms this Read instance to an Iterator over its bytes.>

    lead self
      like sized
        cite free

    take self
      cite free

    free seed
      like bytes
        like self
          cite free
        cite free

  task chain, name <chain>
    note <Creates an adapter which will chain this stream with another.>

    lead self
      like sized
        cite free

    head r

    take self
      cite free
    take next
      like r
        cite free
      cite free

    free seed
      like chain
        like self
          cite free
        like r
          cite free
        cite free

  task take, name <take>
    note <Creates an adapter which will read at most limit bytes from it.>

    lead self
      like sized
        cite free

    take self
      cite free
    take limit
      like u64
        cite free
      cite free

    free seed
      like take
        like self
          cite free
        cite free

  task seek, name <seek>
    note <Seek to an offset, in bytes, in a stream.>

    take self
      cite free
    take pos
      like seek-from
        cite free
      cite free

    free seed
      like result
        like u64
          cite free
        cite free

  task stream-position, name <stream_position>
    note <Returns the current seek position from the start of the stream.>

    take self
      cite free

    free seed
      like result
        like u64
          cite free
        cite free

  task rewind, name <rewind>
    note <Rewind to the beginning of a stream.>

    take self
      cite free

    free seed
      like result
        like form
        cite free

  task stream-len, name <stream_len>
    note <Returns the length of this stream (in bytes).>

    take self
      cite free

    free seed
      like result
        like u64
          cite free
        cite free

  task poll-next, name <poll_next>
    note <Attempt to pull out the next value of this stream, registering the current task for wakeup if the value is not yet available, and returning None if the stream is exhausted.>

    cast c-1
      like box
        like s
          cite free
        like global
          cite free
      like stream

    take self
      like pin
        like box
          like s
            cite free
          like global
            cite free
        cite free
      cite free
    take cx
      like context
        time mask
      lock free

    free seed
      like poll
        like option
          like c-1/item
          cite free
        cite free

  task size-hint, name <size_hint>
    note <Returns the bounds on the remaining length of the stream.>

    take self
      cite free

    free seed
      like form
        take t-1, like usize
        take t-2, like option

  task try-from, name <try_from>
    note <Attempts to convert a Box&lt;[T]&gt; into a Box&lt;[T; N]&gt;.>

    cast c-1
      like box
        like list
          like t
          name n
        like global
          cite free
      like try-from
        like box
          list t
          like global
            cite free
          cite free

    take boxed-slice
      like box
        list t
        like global
          cite free
        cite free
      cite free

    free seed
      like result
        like box
          like list
            like t
            name n
          like global
            cite free
          cite free
        like c-1/error
        cite free

  task write, name <write>
    note <Write a buffer into this writer, returning how many bytes were written.>

    take self
      cite free
    take buf
      list u8
      cite free

    free seed
      like result
        like usize
          cite free
        cite free

  task write-vectored, name <write_vectored>
    note <Like write, except that it writes from a slice of buffers.>

    take self
      cite free
    take bufs
      like list
        like io-slice
          time mask
      cite free

    free seed
      like result
        like usize
          cite free
        cite free

  task is-write-vectored, name <is_write_vectored>
    note <Determines if this Writer has an efficient write_vectored implementation.>

    take self
      cite free

    free seed
      like bool
        cite free

  task flush, name <flush>
    note <Flush this output stream, ensuring that all intermediately buffered contents reach their destination.>

    take self
      cite free

    free seed
      like result
        like form
        cite free

  task write-all, name <write_all>
    note <Attempts to write an entire buffer into this writer.>

    take self
      cite free
    take buf
      list u8
      cite free

    free seed
      like result
        like form
        cite free

  task write-fmt, name <write_fmt>
    note <Writes a formatted string into this writer, returning any error encountered.>

    take self
      cite free
    take fmt
      like arguments
        time mask
        cite free
      cite free

    free seed
      like result
        like form
        cite free

  task write-all-vectored, name <write_all_vectored>
    note <Attempts to write multiple buffers into this writer.>

    take self
      cite free
    take bufs
      like list
        like io-slice
          time mask
      cite free

    free seed
      like result
        like form
        cite free

  task by-ref, name <by_ref>
    note <Creates a “by reference” adapter for this instance of Write.>

    lead self
      like sized
        cite free

    take self
      cite free

    free seed
      like self
