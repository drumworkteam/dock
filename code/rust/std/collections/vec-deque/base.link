
form vec-deque
  task new, name <new>
    note <Creates an empty VecDeque.>

    free seed
      like vec-deque
        like t
          cite free
        like global
          cite free
        cite free

  task with-capacity, name <with_capacity>
    note <Creates an empty VecDeque with space for at least capacity elements.>

    take capacity
      like usize
        cite free
      cite free

    free seed
      like vec-deque
        like t
          cite free
        like global
          cite free
        cite free

  task new-in, name <new_in>
    note <Creates an empty VecDeque.>

    take alloc
      like a
        cite free
      cite free

    free seed
      like vec-deque
        like t
          cite free
        like a
          cite free
        cite free

  task with-capacity-in, name <with_capacity_in>
    note <Creates an empty VecDeque with space for at least capacity elements.>

    take capacity
      like usize
        cite free
      cite free
    take alloc
      like a
        cite free
      cite free

    free seed
      like vec-deque
        like t
          cite free
        like a
          cite free
        cite free

  task get, name <get>
    note <Provides a reference to the element at the given index.>

    take self
      cite free
    take index
      like usize
        cite free
      cite free

    free seed
      like option
        like t
        cite free

  task get-mut, name <get_mut>
    note <Provides a mutable reference to the element at the given index.>

    take self
      cite free
    take index
      like usize
        cite free
      cite free

    free seed
      like option
        like t
        cite free

  task swap, name <swap>
    note <Swaps elements at indices i and j.>

    take self
      cite free
    take i
      like usize
        cite free
      cite free
    take j
      like usize
        cite free
      cite free

  task capacity, name <capacity>
    note <Returns the number of elements the VecDeque can hold without reallocating.>

    take self
      cite free

    free seed
      like usize
        cite free

  task reserve-exact, name <reserve_exact>
    note <Reserves the minimum capacity for exactly additional more elements to be inserted in the given VecDeque. Does nothing if the capacity is already sufficient.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

  task reserve, name <reserve>
    note <Reserves capacity for at least additional more elements to be inserted in the given VecDeque. The collection may reserve more space to avoid frequent reallocations.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

  task try-reserve-exact, name <try_reserve_exact>
    note <Tries to reserve the minimum capacity for exactly additional more elements to be inserted in the given VecDeque&lt;T&gt;. After calling try_reserve_exact, capacity will be greater than or equal to self.len() + additional. Does nothing if the capacity is already sufficient.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

    free seed
      like result
        like form
        like try-reserve-error
          cite free
        cite free

  task try-reserve, name <try_reserve>
    note <Tries to reserve capacity for at least additional more elements to be inserted in the given VecDeque&lt;T&gt;. The collection may reserve more space to avoid frequent reallocations. After calling try_reserve, capacity will be greater than or equal to self.len() + additional. Does nothing if capacity is already sufficient.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

    free seed
      like result
        like form
        like try-reserve-error
          cite free
        cite free

  task shrink-to-fit, name <shrink_to_fit>
    note <Shrinks the capacity of the VecDeque as much as possible.>

    take self
      cite free

  task shrink-to, name <shrink_to>
    note <Shrinks the capacity of the VecDeque with a lower bound.>

    take self
      cite free
    take min-capacity
      like usize
        cite free
      cite free

  task truncate, name <truncate>
    note <Shortens the VecDeque, keeping the first len elements and dropping the rest.>

    take self
      cite free
    take len
      like usize
        cite free
      cite free

  task allocator, name <allocator>
    note <Returns a reference to the underlying allocator.>

    take self
      cite free

    free seed
      like a

  task iter, name <iter>
    note <Returns a front-to-back iterator.>

    take self
      cite free

    free seed
      like iter
        time mask
        like t
          cite free
        cite free

  task iter-mut, name <iter_mut>
    note <Returns a front-to-back iterator that returns mutable references.>

    take self
      cite free

    free seed
      like iter-mut
        time mask
        like t
          cite free
        cite free

  task as-slices, name <as_slices>
    note <Returns a pair of slices which contain, in order, the contents of the VecDeque.>

    take self
      cite free

    free seed
      like form
        take t-1
          list t
        take t-2
          list t

  task as-mut-slices, name <as_mut_slices>
    note <Returns a pair of slices which contain, in order, the contents of the VecDeque.>

    take self
      cite free

    free seed
      like form
        take t-1
          list t
        take t-2
          list t

  task len, name <len>
    note <Returns the number of elements in the VecDeque.>

    take self
      cite free

    free seed
      like usize
        cite free

  task is-empty, name <is_empty>
    note <Returns true if the VecDeque is empty.>

    take self
      cite free

    free seed
      like bool
        cite free

  task range, name <range>
    note <Creates an iterator that covers the specified range in the VecDeque.>

    lead r
      like range-bounds
        like usize
          cite free
        cite free

    head r

    take self
      cite free
    take range
      like r
        cite free
      cite free

    free seed
      like iter
        time mask
        like t
          cite free
        cite free

  task range-mut, name <range_mut>
    note <Creates an iterator that covers the specified mutable range in the VecDeque.>

    lead r
      like range-bounds
        like usize
          cite free
        cite free

    head r

    take self
      cite free
    take range
      like r
        cite free
      cite free

    free seed
      like iter-mut
        time mask
        like t
          cite free
        cite free

  task drain, name <drain>
    note <Creates a draining iterator that removes the specified range in the VecDeque and yields the removed items.>

    lead r
      like range-bounds
        like usize
          cite free
        cite free

    head r

    take self
      cite free
    take range
      like r
        cite free
      cite free

    free seed
      like drain
        time mask
        like t
          cite free
        like a
          cite free
        cite free

  task clear, name <clear>
    note <Clears the VecDeque, removing all values.>

    take self
      cite free

  task contains, name <contains>
    note <Returns true if the VecDeque contains an element equal to the given value.>

    lead t
      like partial-eq
        like t
          cite free
        cite free

    take self
      cite free
    take x
      like t

    free seed
      like bool
        cite free

  task front, name <front>
    note <Provides a reference to the front element, or None if the VecDeque is empty.>

    take self
      cite free

    free seed
      like option
        like t
        cite free

  task front-mut, name <front_mut>
    note <Provides a mutable reference to the front element, or None if the VecDeque is empty.>

    take self
      cite free

    free seed
      like option
        like t
        cite free

  task back, name <back>
    note <Provides a reference to the back element, or None if the VecDeque is empty.>

    take self
      cite free

    free seed
      like option
        like t
        cite free

  task back-mut, name <back_mut>
    note <Provides a mutable reference to the back element, or None if the VecDeque is empty.>

    take self
      cite free

    free seed
      like option
        like t
        cite free

  task pop-front, name <pop_front>
    note <Removes the first element and returns it, or None if the VecDeque is empty.>

    take self
      cite free

    free seed
      like option
        like t
          cite free
        cite free

  task pop-back, name <pop_back>
    note <Removes the last element from the VecDeque and returns it, or None if it is empty.>

    take self
      cite free

    free seed
      like option
        like t
          cite free
        cite free

  task push-front, name <push_front>
    note <Prepends an element to the VecDeque.>

    take self
      cite free
    take value
      like t
        cite free
      cite free

  task push-back, name <push_back>
    note <Appends an element to the back of the VecDeque.>

    take self
      cite free
    take value
      like t
        cite free
      cite free

  task swap-remove-front, name <swap_remove_front>
    note <Removes an element from anywhere in the VecDeque and returns it, replacing it with the first element.>

    take self
      cite free
    take index
      like usize
        cite free
      cite free

    free seed
      like option
        like t
          cite free
        cite free

  task swap-remove-back, name <swap_remove_back>
    note <Removes an element from anywhere in the VecDeque and returns it, replacing it with the last element.>

    take self
      cite free
    take index
      like usize
        cite free
      cite free

    free seed
      like option
        like t
          cite free
        cite free

  task insert, name <insert>
    note <Inserts an element at index within the VecDeque, shifting all elements with indices greater than or equal to index towards the back.>

    take self
      cite free
    take index
      like usize
        cite free
      cite free
    take value
      like t
        cite free
      cite free

  task remove, name <remove>
    note <Removes and returns the element at index from the VecDeque. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns None if index is out of bounds.>

    take self
      cite free
    take index
      like usize
        cite free
      cite free

    free seed
      like option
        like t
          cite free
        cite free

  task split-off, name <split_off>
    note <Splits the VecDeque into two at the given index.>

    lead a
      like clone
        cite free

    take self
      cite free
    take at
      like usize
        cite free
      cite free

    free seed
      like vec-deque
        like t
          cite free
        like a
          cite free
        cite free

  task append, name <append>
    note <Moves all the elements of other into self, leaving other empty.>

    take self
      cite free
    take other
      like vec-deque
        like t
          cite free
        like a
          cite free
      lock free

  task retain, name <retain>
    note <Retains only the elements specified by the predicate.>

    lead f
      like fn-mut
        take f-1, like t
        free seed
          like bool
            cite free

    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

  task retain-mut, name <retain_mut>
    note <Retains only the elements specified by the predicate.>

    lead f
      like fn-mut
        take f-1, like t
        free seed
          like bool
            cite free

    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

  task make-contiguous, name <make_contiguous>
    note <Rearranges the internal storage of this deque so it is one contiguous slice, which is then returned.>

    take self
      cite free

    free seed
      list t

  task rotate-left, name <rotate_left>
    note <Rotates the double-ended queue mid places to the left.>

    take self
      cite free
    take mid
      like usize
        cite free
      cite free

  task rotate-right, name <rotate_right>
    note <Rotates the double-ended queue k places to the right.>

    take self
      cite free
    take k
      like usize
        cite free
      cite free

  task binary-search, name <binary_search>
    note <Binary searches this sorted VecDeque for a given element.>

    lead t
      like ord
        cite free

    take self
      cite free
    take x
      like t

    free seed
      like result
        like usize
          cite free
        like usize
          cite free
        cite free

  task binary-search-by, name <binary_search_by>
    note <Binary searches this sorted VecDeque with a comparator function.>

    lead f
      like fn-mut
        take f-1, like t
        free seed
          like ordering
            cite free

    time a

    head f

    take self
      cite free
    take f
      like f
        cite free
      cite free

    free seed
      like result
        like usize
          cite free
        like usize
          cite free
        cite free

  task binary-search-by-key, name <binary_search_by_key>
    note <Binary searches this sorted VecDeque with a key extraction function.>

    lead f
      like fn-mut
        take f-1, like t
        free seed
          like b
            cite free
    lead b
      like ord
        cite free

    time a

    head b
    head f

    take self
      cite free
    take b
      like b
    take f
      like f
        cite free
      cite free

    free seed
      like result
        like usize
          cite free
        like usize
          cite free
        cite free

  task partition-point, name <partition_point>
    note <Returns the index of the partition point according to the given predicate (the index of the first element of the second partition).>

    lead p
      like fn-mut
        take f-1, like t
        free seed
          like bool
            cite free

    head p

    take self
      cite free
    take pred
      like p
        cite free
      cite free

    free seed
      like usize
        cite free

  task resize, name <resize>
    note <Modifies the VecDeque in-place so that len() is equal to new_len, either by removing excess elements from the back or by appending clones of value to the back.>

    take self
      cite free
    take new-len
      like usize
        cite free
      cite free
    take value
      like t
        cite free
      cite free

  task clone, name <clone>
    note <Returns a copy of the value.>

    take self
      cite free

    free seed
      like vec-deque
        like t
          cite free
        like a
          cite free
        cite free

  task clone-from, name <clone_from>
    note <Performs copy-assignment from source.>

    take self
      cite free
    take other
      like vec-deque
        like t
          cite free
        like a
          cite free

  task fmt, name <fmt>
    note <Formats the value using the given formatter.>

    take self
      cite free
    take f
      like formatter
        time mask
      lock free

    free seed
      like result
        like form
        like error
          cite free
        cite free

  task default, name <default>
    note <Creates an empty VecDeque&lt;T&gt;.>

    free seed
      like vec-deque
        like t
          cite free
        like global
          cite free
        cite free

  task drop, name <drop>
    note <Executes the destructor for this type.>

    take self
      cite free

  task extend, name <extend>
    note <Extends a collection with the contents of an iterator.>

    lead i
      like into-iterator
        like item
          cite free
          fall back
            like t
              time a
        cite free

    head i

    take self
      cite free
    take iter
      like i
        cite free
      cite free

  task extend-one, name <extend_one>
    note <Extends a collection with exactly one element.>

    take self
      cite free
    take t
      cite free

  task extend-reserve, name <extend_reserve>
    note <Reserves capacity in a collection for the given number of additional elements.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

  task extend, name <extend>
    note <Extends a collection with the contents of an iterator.>

    lead i
      like into-iterator
        like item
          cite free
          fall back
            like t
              cite free
        cite free

    head i

    take self
      cite free
    take iter
      like i
        cite free
      cite free

  task extend-one, name <extend_one>
    note <Extends a collection with exactly one element.>

    take self
      cite free
    take elem
      like t
        cite free
      cite free

  task extend-reserve, name <extend_reserve>
    note <Reserves capacity in a collection for the given number of additional elements.>

    take self
      cite free
    take additional
      like usize
        cite free
      cite free

  task from, name <from>
    take arr
      like list
        like t
        name n
      cite free

    free seed
      like vec-deque
        like t
          cite free
        like global
          cite free
        cite free

  task from, name <from>
    note <Turn a Vec&lt;T&gt; into a VecDeque&lt;T&gt;.>

    take other
      like vec
        like t
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like vec-deque
        like t
          cite free
        like a
          cite free
        cite free

  task from, name <from>
    note <Turn a VecDeque&lt;T&gt; into a Vec&lt;T&gt;.>

    take other
      like vec-deque
        like t
          cite free
        like a
          cite free
        cite free
      cite free

    free seed
      like vec
        like t
          cite free
        like a
          cite free
        cite free

  task from-iter, name <from_iter>
    note <Creates a value from an iterator.>

    lead i
      like into-iterator
        like item
          cite free
          fall back
            like t
              cite free
        cite free

    head i

    take iter
      like i
        cite free
      cite free

    free seed
      like vec-deque
        like t
          cite free
        like global
          cite free
        cite free

  task hash, name <hash>
    note <Feeds this value into the given Hasher.>

    lead h
      like hasher
        cite free

    head h

    take self
      cite free
    take state
      like h
      lock free

  task hash-slice, name <hash_slice>
    note <Feeds a slice of this type into the given Hasher.>

    lead h
      like hasher
        cite free

    head h

    take data
      list self
      cite free
    take state
      like h
      lock free

  task index, name <index>
    note <Performs the indexing (container[index]) operation.>

    take self
      cite free
    take index
      like usize
        cite free
      cite free

    free seed
      like t

  task index-mut, name <index_mut>
    note <Performs the mutable indexing (container[index]) operation.>

    take self
      cite free
    take index
      like usize
        cite free
      cite free

    free seed
      like t

  task into-iter, name <into_iter>
    note <Creates an iterator from a value.>

    take self
      cite free

    free seed
      like iter
        time a
        like t
          cite free
        cite free

  task into-iter, name <into_iter>
    note <Consumes the VecDeque into a front-to-back iterator yielding elements by value.>

    take self
      cite free

    free seed
      like into-iter
        like t
          cite free
        like a
          cite free
        cite free

  task into-iter, name <into_iter>
    note <Creates an iterator from a value.>

    take self
      cite free

    free seed
      like iter-mut
        time a
        like t
          cite free
        cite free

  task cmp, name <cmp>
    note <This method returns an Ordering between self and other.>

    take self
      cite free
    take other
      like vec-deque
        like t
          cite free
        like a
          cite free

    free seed
      like ordering
        cite free

  task max, name <max>
    note <Compares and returns the maximum of two values.>

    take self
      cite free
    take other
      like self
        cite free
      cite free

    free seed
      like self
        cite free

  task min, name <min>
    note <Compares and returns the minimum of two values.>

    take self
      cite free
    take other
      like self
        cite free
      cite free

    free seed
      like self
        cite free

  task clamp, name <clamp>
    note <Restrict a value to a certain interval.>

    take self
      cite free
    take min
      like self
        cite free
      cite free
    take max
      like self
        cite free
      cite free

    free seed
      like self
        cite free

  task eq, name <eq>
    note <This method tests for self and other values to be equal, and is used by ==.>

    take self
      cite free
    take other
      like list
        like u
        name n
      cite free

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <This method tests for !=.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free

  task eq, name <eq>
    note <This method tests for self and other values to be equal, and is used by ==.>

    take self
      cite free
    take other
      list u
      cite free

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <This method tests for !=.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free

  task eq, name <eq>
    note <This method tests for self and other values to be equal, and is used by ==.>

    take self
      cite free
    take other
      like list
        like u
        name n
      cite free

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <This method tests for !=.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free

  task eq, name <eq>
    note <This method tests for self and other values to be equal, and is used by ==.>

    take self
      cite free
    take other
      list u
      cite free

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <This method tests for !=.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free

  task eq, name <eq>
    note <This method tests for self and other values to be equal, and is used by ==.>

    take self
      cite free
    take other
      like list
        like u
        name n
      cite free

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <This method tests for !=.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free

  task eq, name <eq>
    note <This method tests for self and other values to be equal, and is used by ==.>

    take self
      cite free
    take other
      like vec
        like u
          cite free
        like a
          cite free

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <This method tests for !=.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free

  task eq, name <eq>
    note <This method tests for self and other values to be equal, and is used by ==.>

    take self
      cite free
    take other
      like vec-deque
        like t
          cite free
        like a
          cite free

    free seed
      like bool
        cite free

  task ne, name <ne>
    note <This method tests for !=.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free

  task partial-cmp, name <partial_cmp>
    note <This method returns an ordering between self and other values if one exists.>

    take self
      cite free
    take other
      like vec-deque
        like t
          cite free
        like a
          cite free

    free seed
      like option
        like ordering
          cite free
        cite free

  task lt, name <lt>
    note <This method tests less than (for self and other) and is used by the &lt; operator.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free

  task le, name <le>
    note <This method tests less than or equal to (for self and other) and is used by the &lt;= operator.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free

  task gt, name <gt>
    note <This method tests greater than (for self and other) and is used by the &gt; operator.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free

  task ge, name <ge>
    note <This method tests greater than or equal to (for self and other) and is used by the &gt;= operator.>

    take self
      cite free
    take other
      like rhs

    free seed
      like bool
        cite free
